from source.courses.db_queries import get_student_courses, get_teacher_courses, get_course_students

from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from source.database import SessionLocal

async def view_courses_by_student(update: Update, context: CallbackContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    """
    user = update.effective_user
    telegram_tag = user.username

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    with SessionLocal() as db:
        try:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏
            courses = get_student_courses(telegram_tag, db, active_only=True)

            if not courses:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –∞–±–æ –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ —Å—Ç—É–¥–µ–Ω—Ç.")
                return

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—É—Ä—Å–∞–º–∏
            message = "üìö *–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏:*\n\n"

            for course in courses:
                message += f"*{course['course_name']}*\n"
                message += f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {course['teacher']['name']}\n"
                message += f"üìß Email: {course['teacher']['email']}\n"

                if course['teacher']['phone'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {course['teacher']['phone']}\n"

                message += f"üìù –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"

                if course['meeting_link'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                    message += f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á: {course['meeting_link']}\n"

                message += "\n"

            await update.message.reply_text(message, parse_mode="Markdown")

        except Exception as e:
            await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

async def view_students(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î –≤–∏–∫–ª–∞–¥–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫."""

    # –û—Ç—Ä–∏–º—É—î–º–æ Telegram —Ç–µ–≥ –≤–∏–∫–ª–∞–¥–∞—á–∞
    telegram_tag = update.message.from_user.username

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Å—ñ—ó SQLAlchemy
        with SessionLocal() as db:
            courses = get_teacher_courses(telegram_tag, db)

            if not courses:
                await update.message.reply_text("–í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –∂–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å—É.")
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                keyboard.append([InlineKeyboardButton(
                    course["course_name"],
                    callback_data=f"teachercourse_{course['course_id']}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:",
                reply_markup=reply_markup
            )

    except Exception as e:
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤: {str(e)}")

async def course_callback_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –∑ –∫—É—Ä—Å–æ–º."""
    query = update.callback_query
    await query.answer()  # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –∫–æ–ª–±–µ–∫-–∑–∞–ø–∏—Ç

    # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä—Å—É –∑ callback_data
    course_id = int(query.data.split('_')[1])

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Å—ñ—ó SQLAlchemy
        with SessionLocal() as db:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å
            course_info = None
            courses = get_teacher_courses(query.from_user.username, db)
            for course in courses:
                if course["course_id"] == course_id:
                    course_info = course
                    break

            if not course_info:
                await query.edit_message_text("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            students = get_course_students(course_id, db)

            if not students:
                await query.edit_message_text(f"–ù–∞ –∫—É—Ä—Å—ñ '{course_info['course_name']}' –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.")
                return

            # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            student_info = "\n\n".join(
                [f"üë§ *{student['student_name']}*\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: {student['student_phone']}\nüí¨ Telegram: @{student['telegram_tag']}"
                 for student in students]
            )

            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤", callback_data="back_teachercourses")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                f"üìã *–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –∫—É—Ä—Å—ñ '{course_info['course_name']}'*:\n\n{student_info}",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

    except Exception as e:
        await query.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: {str(e)}")

async def back_to_courses_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤'."""
    query = update.callback_query
    await query.answer()

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤, –∞–ª–µ —á–µ—Ä–µ–∑ edit_message
    telegram_tag = query.from_user.username

    try:
        with SessionLocal() as db:
            courses = get_teacher_courses(telegram_tag, db)

            if not courses:
                await query.edit_message_text("–í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –∂–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å—É.")
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                keyboard.append([InlineKeyboardButton(
                    course["course_name"],
                    callback_data=f"teachercourse_{course['course_id']}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:",
                reply_markup=reply_markup
            )

    except Exception as e:
        await query.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤: {str(e)}")