from source.courses.db_queries import get_student_courses, get_teacher_courses, get_course_students, \
    get_teacher_id_by_username, add_new_course
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, MessageHandler, CallbackQueryHandler, \
    filters, ContextTypes
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler
from source.database import SessionLocal

# –°—Ç–∞–Ω–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É
ADD_COURSE_NAME, ADD_COURSE_PLATFORM, ADD_COURSE_LINK = range(3)
# –°—Ç–∞–Ω–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫—É—Ä—Å—É
DEACTIVATE_COURSE = range(1)

async def view_courses_by_student(update: Update, context: CallbackContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    """
    user = update.effective_user
    telegram_tag = user.username

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—é –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    with SessionLocal() as db:
        try:
            # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ—Ç—Ä–∏–º—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏
            courses = get_student_courses(telegram_tag, db, active_only=True)

            if not courses:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –∞–±–æ –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ —Å—Ç—É–¥–µ–Ω—Ç.")
                return

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫—É—Ä—Å–∞–º–∏
            message = "üìö *–í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏:*\n\n"

            for course in courses:
                message += f"*{course['course_name']}*\n"
                message += f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {course['teacher']['name']}\n"
                message += f"üìß Email: {course['teacher']['email']}\n"

                if course['teacher']['phone'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                    message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {course['teacher']['phone']}\n"

                message += f"üìù –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"

                if course['meeting_link'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                    message += f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á: {course['meeting_link']}\n"

                message += "\n"

            await update.message.reply_text(message, parse_mode="Markdown")

        except Exception as e:
            await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

async def view_students(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î –≤–∏–∫–ª–∞–¥–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫."""

    # –û—Ç—Ä–∏–º—É—î–º–æ Telegram —Ç–µ–≥ –≤–∏–∫–ª–∞–¥–∞—á–∞
    telegram_tag = update.message.from_user.username

    try:
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–µ—Å—ñ—ó SQLAlchemy
        with SessionLocal() as db:
            courses = get_teacher_courses(telegram_tag, db)

            if not courses:
                await update.message.reply_text("–í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –∂–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å—É.")
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                keyboard.append([InlineKeyboardButton(
                    course["course_name"],
                    callback_data=f"teachercourse_{course['course_id']}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:",
                reply_markup=reply_markup
            )

    except Exception as e:
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤: {str(e)}")


async def back_to_courses_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤'."""
    query = update.callback_query
    await query.answer()

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤, –∞–ª–µ —á–µ—Ä–µ–∑ edit_message
    telegram_tag = query.from_user.username

    try:
        with SessionLocal() as db:
            courses = get_teacher_courses(telegram_tag, db)

            if not courses:
                await query.edit_message_text("–í–∏ –Ω–µ –≤–µ–¥–µ—Ç–µ –∂–æ–¥–Ω–æ–≥–æ –∫—É—Ä—Å—É.")
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                keyboard.append([InlineKeyboardButton(
                    course["course_name"],
                    callback_data=f"teachercourse_{course['course_id']}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:",
                reply_markup=reply_markup
            )

    except Exception as e:
        await query.edit_message_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤: {str(e)}")
async def courses(update: Update, context: CallbackContext):
    """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á–∞ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó."""
    user = update.effective_user
    message_obj = update.message or update.callback_query.message

    with SessionLocal() as session:
        courses_list = get_teacher_courses(user.username, session, active_only=True)

        if not courses_list:
            teacher_id = get_teacher_id_by_username(session, user.username)
            if teacher_id is None:
                await message_obj.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–ª–∞–¥–∞—á.")
                return
            else:
                message = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤."
        else:
            message = "üìö <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏:</b>\n\n"
            for course in courses_list:
                students = get_course_students(course["course_id"], session)
                student_count = len(students)

                message += f"<b>{course['course_name']}</b>\n"
                message += f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"
                message += f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {course['meeting_link']}\n"
                message += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: {student_count}\n\n"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫—É—Ä—Å", callback_data="add_course")],
            [InlineKeyboardButton("‚ùå –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫—É—Ä—Å", callback_data="deactivate_course")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await message_obj.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')



async def add_course_name(update: Update, context: CallbackContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –∫—É—Ä—Å—É —Ç–∞ –∑–∞–ø–∏—Ç—É—î –ø–ª–∞—Ç—Ñ–æ—Ä–º—É."""
    context.user_data['course_name'] = update.message.text
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ (–∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ '-', —è–∫—â–æ –Ω–µ–º–∞—î):")
    return ADD_COURSE_PLATFORM

async def add_course_platform(update: Update, context: CallbackContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Ç–∞ –∑–∞–ø–∏—Ç—É—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á."""
    platform = update.message.text
    context.user_data['course_platform'] = None if platform == '-' else platform
    await update.message.reply_text("–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á (–∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ '-', —è–∫—â–æ –Ω–µ–º–∞—î):")
    return ADD_COURSE_LINK

async def add_course_link(update: Update, context: CallbackContext):
    """–ó–∞–≤–µ—Ä—à—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—É —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –π–æ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö."""
    link = update.message.text
    context.user_data['course_link'] = None if link == '-' else link

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    course_name = context.user_data['course_name']
    course_platform = context.user_data['course_platform']
    course_link = context.user_data['course_link']

    user = update.effective_user

    with SessionLocal() as session:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID –≤–∏–∫–ª–∞–¥–∞—á–∞
        teacher_id = get_teacher_id_by_username(session, user.username)

        if not teacher_id:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞.")
            return ConversationHandler.END

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫—É—Ä—Å
        success = add_new_course(session, course_name, course_platform, course_link, teacher_id)

        if success:
            await update.message.reply_text(f"–ö—É—Ä—Å '{course_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
        else:
            await update.message.reply_text("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫—É—Ä—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    context.user_data.clear()

    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∫—É—Ä—Å—ñ–≤ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ
    update.callback_query = None  # –ü–µ—Ä–µ–∫–æ–Ω–∞—î–º–æ—Å—è, —â–æ –Ω–µ–º–∞—î callback_query
    await courses(update, context)

    return ConversationHandler.END

async def course_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data  # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "teachercourse_view_5", "teachercourse_edit_5", "teachercourse_deactivate_5"

    if data.startswith("teachercourse_"):
        parts = data.split("_")  # ['teachercourse', 'view', '5']
        if len(parts) >= 3:
            action = parts[1]
            course_id = parts[2]

            if action == "view":
                await query.edit_message_text(f"üîç –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å ID {course_id}")
                # –¢—É—Ç –º–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—è–≥ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —ñ –≤–∏–≤—ñ–¥ –¥–µ—Ç–∞–ª–µ–π –∫—É—Ä—Å—É

            elif action == "edit":
                context.user_data["editing_course_id"] = course_id
                await query.edit_message_text(f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∫—É—Ä—Å—É ID {course_id}")
                # –î–∞–ª—ñ —á–µ–∫–∞—î—à –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –≤–∏–∫–ª–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ MessageHandler

            elif action == "deactivate":
                # –¢—É—Ç —Å—Ç–∞–≤–∏—à —É –±–∞–∑—ñ is_active = False
                await query.edit_message_text(f"üõë –ö—É—Ä—Å ID {course_id} –±—É–ª–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.")
                # –ú–æ–∂–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤
