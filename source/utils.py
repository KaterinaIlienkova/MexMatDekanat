from telegram import Update
from telegram.ext import CallbackContext

from source.announcements.publication import send_announcement
from source.auth.permissions import handle_button_click
from source.auth.registration import save_new_user
from source.config import (WAITING_FOR_QUESTION, WAITING_FOR_ANSWER, WAITING_FOR_EDIT_ANSWER,
                           WAITING_FOR_ANNOUNCEMENT_TEXT, WAITING_FOR_USER_ROLE, WAITING_FOR_USER_DETAILS)
from source.database import SessionLocal
from source.faq.handlers import add_faq, update_faq


async def message_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É —Ä–æ–∑–º–æ–≤–∏."""

    if update.message.text == "/cancel":
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    state = context.user_data.get("state")

    # ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ
    if state == WAITING_FOR_USER_ROLE:
        role = update.message.text.lower()
        if role not in ["student", "teacher"]:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä–æ–ª—å! –í–∏–±–µ—Ä—ñ—Ç—å 'student' –∞–±–æ 'teacher'.")
            return

        context.user_data["new_role"] = role
        context.user_data["state"] = WAITING_FOR_USER_DETAILS

        if role == "student":
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, TelegramTag, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≥—Ä—É–ø—É, —Ä—ñ–∫ –≤—Å—Ç—É–ø—É —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º—É.\n\nüìå –ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ, ivan_petrenko, +380961234567, –§–Ü-21, 2023, –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏")
        else:  # –í–∏–∫–ª–∞–¥–∞—á
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, TelegramTag, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, email —Ç–∞ –∫–∞—Ñ–µ–¥—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º—É.\n\nüìå –ü—Ä–∏–∫–ª–∞–¥: –ü–µ—Ç—Ä–æ –Ü–≤–∞–Ω–æ–≤, petro_ivanov, +380501234567, petro@example.com, –ö–∞—Ñ–µ–¥—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏")
        return

    # ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    elif state == WAITING_FOR_USER_DETAILS:
        data = update.message.text.split(",")

        role = context.user_data["new_role"]
        if role == "student" and len(data) != 6:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å 6 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
            return
        if role == "teacher" and len(data) != 5:  # –¢–µ–ø–µ—Ä –æ—á—ñ–∫—É—î–º–æ 5 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å 5 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
            return

        context.user_data["new_user_name"] = data[0].strip()
        context.user_data["new_telegram_tag"] = data[1].strip()
        context.user_data["new_phone"] = data[2].strip()

        if role == "student":
            context.user_data["new_group"] = data[3].strip()
            context.user_data["new_admission_year"] = int(data[4].strip())
            context.user_data["new_specialty"] = data[5].strip()
        else:  # –í–∏–∫–ª–∞–¥–∞—á
            context.user_data["new_email"] = data[3].strip()  # Email - —á–µ—Ç–≤–µ—Ä—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            context.user_data["new_department"] = data[4].strip()  # –ö–∞—Ñ–µ–¥—Ä–∞ - –ø'—è—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        await save_new_user(update, context)
        return

    # –Ü–Ω—à—ñ —Å—Ç–∞–Ω–∏ (FAQ, –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–æ—â–æ)
    elif state == WAITING_FOR_QUESTION:
        context.user_data["new_question"] = update.message.text
        context.user_data["state"] = WAITING_FOR_ANSWER
        await update.message.reply_text("‚úèÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
        return

    elif state == WAITING_FOR_ANSWER:
        question = context.user_data.get("new_question", "")
        answer = update.message.text
        with SessionLocal() as db:
            success = add_faq(db, question, answer)
        if success:
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ FAQ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.")
        context.user_data.clear()
        return

    elif state == WAITING_FOR_EDIT_ANSWER:
        faq_id = context.user_data.get("edit_faq_id")
        new_answer = update.message.text
        with SessionLocal() as db:
            success = update_faq(db, faq_id, new_answer)
        if success:
            await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.")
        context.user_data.clear()
        return

    elif state == WAITING_FOR_ANNOUNCEMENT_TEXT:
        announcement_text = update.message.text
        await send_announcement(update, context)
        return

    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
    await handle_button_click(update, context)
