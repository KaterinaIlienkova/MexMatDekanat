from sqlalchemy.exc import SQLAlchemyError
from telegram import Update
from telegram.ext import CallbackContext

from source.announcements.publication import send_announcement
from source.auth.permissions import handle_button_click
from source.auth.registration import save_new_user, confirm_command, edit_user_handler
from source.config import (WAITING_FOR_QUESTION, WAITING_FOR_ANSWER, WAITING_FOR_EDIT_ANSWER,
                           WAITING_FOR_ANNOUNCEMENT_TEXT, WAITING_FOR_USER_ROLE, WAITING_FOR_USER_DETAILS,
                           WAITING_FOR_STUDENT_DETAILS, WAITING_FOR_SCAN_LINK, WAITING_FOR_EDIT_FIELD)
from source.courses.db_queries import get_teacher_id_by_username, add_new_course
from source.courses.handlers import ADD_COURSE_LINK, ADD_COURSE_PLATFORM, ADD_COURSE_NAME, courses
from source.database import SessionLocal
from source.faq.handlers import add_faq, update_faq
from source.models import DocumentRequest, Student, User, StudentGroup
import logging
logger = logging.getLogger(__name__)

async def message_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞–Ω—É —Ä–æ–∑–º–æ–≤–∏."""
    text = update.message.text
    if "editing_course_id" in context.user_data:
        course_id = context.user_data.pop("editing_course_id")
        new_name = text
        # update_course_name(course_id, new_name) ‚Äî –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–ª–∏–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤—É –∫—É—Ä—Å—É ID {course_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}")
        return

    if update.message.text == "/cancel":
        context.user_data.clear()
        await update.message.reply_text("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    state = context.user_data.get("state")
    # ‚úÖ –û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if "edit_field" in context.user_data and "edit_user_tag" in context.user_data:
        field = context.user_data.get("edit_field")
        telegram_tag = context.user_data.get("edit_user_tag")
        new_value = update.message.text

        with SessionLocal() as db:
            user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
            if not user:
                await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                context.user_data.clear()
                return

            try:
                if field == "name":
                    user.UserName = new_value
                    db.commit()
                elif field == "phone":
                    user.PhoneNumber = new_value
                    db.commit()
                elif field == "year":
                    student = db.query(Student).filter_by(UserID=user.UserID).first()
                    if student:
                        try:
                            year = int(new_value)
                            student.AdmissionYear = year
                            db.commit()
                        except ValueError:
                            await update.message.reply_text("‚ùå –†—ñ–∫ –≤—Å—Ç—É–ø—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
                            return
                    else:
                        await update.message.reply_text("‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —Å—Ç—É–¥–µ–Ω—Ç–æ–º.")
                        return
                elif field == "group":
                    student = db.query(Student).filter_by(UserID=user.UserID).first()
                    if student:
                        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≥—Ä—É–ø–∞ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º
                        group = db.query(StudentGroup).filter_by(GroupName=new_value).first()
                        if group:
                            student.GroupID = group.GroupID
                            db.commit()
                        else:
                            # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ ID –≥—Ä—É–ø–∏ –∑–∞–º—ñ—Å—Ç—å –Ω–∞–∑–≤–∏
                            try:
                                group_id = int(new_value)
                                group = db.query(StudentGroup).filter_by(GroupID=group_id).first()
                                if group:
                                    student.GroupID = group_id
                                    db.commit()
                                else:
                                    await update.message.reply_text(f"‚ùå –ì—Ä—É–ø—É –∑ ID {group_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                                    context.user_data.clear()
                                    return
                            except ValueError:
                                await update.message.reply_text("‚ùå –¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ —ñ—Å–Ω—É—î.")
                                context.user_data.clear()
                                return
                    else:
                        await update.message.reply_text("‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —Å—Ç—É–¥–µ–Ω—Ç–æ–º.")
                        context.user_data.clear()
                        return

                await update.message.reply_text(f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –∑–º—ñ–Ω—É –π–æ–≥–æ –¥–∞–Ω–∏—Ö
                if user.ChatID:
                    field_names = {
                        "name": "—ñ–º'—è",
                        "phone": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                        "group": "–≥—Ä—É–ø–∞",
                        "year": "—Ä—ñ–∫ –≤—Å—Ç—É–ø—É"
                    }
                    try:
                        await context.bot.send_message(
                            chat_id=user.ChatID,
                            text=f"‚ÑπÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–º—ñ–Ω–∏–≤ –≤–∞—à—ñ –¥–∞–Ω—ñ: {field_names[field]} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_value}'."
                        )
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

            except SQLAlchemyError as e:
                logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
                db.rollback()
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

        # –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if "edit_field" in context.user_data:
            del context.user_data["edit_field"]
        if "edit_user_tag" in context.user_data:
            del context.user_data["edit_user_tag"]

        return

    # ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –≤–∏–±—ñ—Ä —Ä–æ–ª—ñ
    if state == WAITING_FOR_USER_ROLE:
        role = update.message.text.lower()
        if role not in ["student", "teacher"]:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ä–æ–ª—å! –í–∏–±–µ—Ä—ñ—Ç—å 'student' –∞–±–æ 'teacher'.")
            return

        context.user_data["new_role"] = role
        context.user_data["state"] = WAITING_FOR_USER_DETAILS

        if role == "student":
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, TelegramTag, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≥—Ä—É–ø—É, —Ä—ñ–∫ –≤—Å—Ç—É–ø—É —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º—É.\n\nüìå –ü—Ä–∏–∫–ª–∞–¥: –Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ, ivan_petrenko, +380961234567, –§–Ü-21, 2023, –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏")
        else:  # –í–∏–∫–ª–∞–¥–∞—á
            await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, TelegramTag, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, email —Ç–∞ –∫–∞—Ñ–µ–¥—Ä—É —á–µ—Ä–µ–∑ –∫–æ–º—É.\n\nüìå –ü—Ä–∏–∫–ª–∞–¥: –ü–µ—Ç—Ä–æ –Ü–≤–∞–Ω–æ–≤, petro_ivanov, +380501234567, petro@example.com, –ö–∞—Ñ–µ–¥—Ä–∞ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏")
        return

    # ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –≤–≤–µ–¥–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    elif state == WAITING_FOR_USER_DETAILS:
        data = update.message.text.split(",")

        role = context.user_data["new_role"]
        if role == "student" and len(data) != 6:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å 6 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
            return
        if role == "teacher" and len(data) != 5:  # –¢–µ–ø–µ—Ä –æ—á—ñ–∫—É—î–º–æ 5 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á–∞
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å 5 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
            return

        context.user_data["new_user_name"] = data[0].strip()
        context.user_data["new_telegram_tag"] = data[1].strip()
        context.user_data["new_phone"] = data[2].strip()

        if role == "student":
            context.user_data["new_group"] = data[3].strip()
            context.user_data["new_admission_year"] = int(data[4].strip())
            context.user_data["new_specialty"] = data[5].strip()
        else:  # –í–∏–∫–ª–∞–¥–∞—á
            context.user_data["new_email"] = data[3].strip()  # Email - —á–µ—Ç–≤–µ—Ä—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            context.user_data["new_department"] = data[4].strip()  # –ö–∞—Ñ–µ–¥—Ä–∞ - –ø'—è—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä

        await save_new_user(update, context)
        await confirm_command(update, context)
        return

    elif state == WAITING_FOR_STUDENT_DETAILS:
        data = update.message.text.split(",")
        if  len(data) != 5:
            await update.message.reply_text("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥—ñ—Ç—å 5 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É.")
            return
        context.user_data["new_user_name"] = data[0].strip()
        context.user_data["new_phone"] = data[1].strip()
        context.user_data["new_group"] = data[2].strip()
        context.user_data["new_admission_year"] = int(data[3].strip())
        context.user_data["new_specialty"] = data[4].strip()

        await save_new_user(update, context)
        await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –ø–æ–¥–∞–Ω–∞! –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –¥–µ–∫–∞–Ω–∞—Ç—É.")
        return

    # –Ü–Ω—à—ñ —Å—Ç–∞–Ω–∏ (FAQ, –û–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–æ—â–æ)
    elif state == WAITING_FOR_QUESTION:
        context.user_data["new_question"] = update.message.text
        context.user_data["state"] = WAITING_FOR_ANSWER
        await update.message.reply_text("‚úèÔ∏è –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å:")
        return

    elif state == WAITING_FOR_ANSWER:
        question = context.user_data.get("new_question", "")
        answer = update.message.text
        with SessionLocal() as db:
            success = add_faq(db, question, answer)
        if success:
            await update.message.reply_text("‚úÖ –ü–∏—Ç–∞–Ω–Ω—è –¥–æ–¥–∞–Ω–æ –¥–æ FAQ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è.")
        context.user_data.clear()
        return

    elif state == WAITING_FOR_EDIT_ANSWER:
        faq_id = context.user_data.get("edit_faq_id")
        new_answer = update.message.text
        with SessionLocal() as db:
            success = update_faq(db, faq_id, new_answer)
        if success:
            await update.message.reply_text("‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.")
        context.user_data.clear()
        return

    elif state == WAITING_FOR_ANNOUNCEMENT_TEXT:
        announcement_text = update.message.text
        await send_announcement(update, context)
        return

    elif state == WAITING_FOR_SCAN_LINK:

        scan_link = update.message.text
        request_id = context.user_data.pop("processing_request_id")

        with SessionLocal() as db:
            request = db.query(DocumentRequest).filter(DocumentRequest.RequestID == request_id).first()
            request.Status = 'approved'
            db.commit()

            student = db.query(Student).filter(Student.StudentID == request.StudentID).first()
            user = db.query(User).filter(User.UserID == student.UserID).first()

            await context.bot.send_message(
                chat_id=user.ChatID,
                text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request.RequestID} –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞!\n–í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–∞–ø–µ—Ä–æ–≤—É –≤–µ—Ä—Å—ñ—é —É –¥–µ–∫–∞–Ω–∞—Ç—ñ –∞–±–æ —Å–∫–∞–Ω-–∫–æ–ø—ñ—é –¥–æ–∫—É–º–µ–Ω—Ç—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {scan_link}"
            )

        await update.message.reply_text(f"–ó–∞—è–≤–∫—É ‚Ññ{request_id} –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.")


    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫
    await handle_button_click(update, context)
