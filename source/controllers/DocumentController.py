from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, MessageHandler, CommandHandler, filters, CallbackQueryHandler

from source.controllers.BaseController import BaseController
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CommandHandler, CallbackQueryHandler, MessageHandler, filters

class DocumentController(BaseController):
    def __init__(self, application, document_service):
        super().__init__(application)  # –í–∏–∫–ª–∏–∫–∞—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—É
        self.document_service = document_service
        self.WAITING_FOR_SCAN_LINK = 1

    def register_handlers(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."""
        return [
            CallbackQueryHandler(self.select_document, pattern="^doc_select_"),
            CallbackQueryHandler(self.confirm_document_request, pattern="^doc_confirm_"),
            CallbackQueryHandler(self.cancel_document_request, pattern="^cancel_doc$"),
            CallbackQueryHandler(self.handle_document_request, pattern="^handle_request_"),
            CallbackQueryHandler(self.process_document_request, pattern="^process_doc_"),
            CallbackQueryHandler(self.reject_document_request, pattern="^reject_doc_")
        ]
    async def request_document(self, update: Update, context: CallbackContext):
        """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É."""
        can_request, result = self.document_service.can_request_document(update.effective_chat.id)

        if not can_request:
            await update.message.reply_text(result)
            return

        student = result

        document_types, error_message = self.document_service.get_available_document_types()

        if error_message:
            await update.message.reply_text(error_message)
            return

        keyboard = [[InlineKeyboardButton(doc.TypeName, callback_data=f"doc_select_{doc.TypeID}")] for doc in document_types]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:",
            reply_markup=reply_markup
        )

    async def select_document(self, update: Update, context: CallbackContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç—É."""
        query = update.callback_query
        await query.answer()

        document_type_id = int(query.data.split('_')[2])

        can_request, result = self.document_service.can_request_document(update.effective_chat.id)

        if not can_request:
            await query.edit_message_text(result)
            return

        student = result
        document_type = self.document_service.document_type_repo.get_document_type_by_id(document_type_id)

        if not document_type:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–∞–Ω–∏–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"doc_confirm_{document_type_id}_{student.StudentID}")],
            [InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_doc")]
        ]

        await query.edit_message_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏: {document_type.TypeName}\n\n–ë–∞–∂–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def confirm_document_request(self, update: Update, context: CallbackContext):
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        query = update.callback_query
        await query.answer()

        try:
            parts = query.data.split('_')
            if len(parts) != 4:
                raise ValueError(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data: {query.data}")

            _, _, document_type_id_str, student_id_str = parts
            document_type_id = int(document_type_id_str)
            student_id = int(student_id_str)

            new_request, document_type = self.document_service.create_document_request(document_type_id, student_id)

            if new_request:
                await query.edit_message_text(
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç **'{document_type.TypeName}'** —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n"
                    f"üìÑ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {new_request.RequestID}\n"
                    f"‚è≥ –°—Ç–∞—Ç—É—Å: –í –æ–±—Ä–æ–±—Ü—ñ"
                )
            else:
                await query.edit_message_text(document_type)

        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {e}")
            await query.edit_message_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É."
            )

    async def cancel_document_request(self, update: Update, context: CallbackContext):
        """–°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

    async def view_pending_requests(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è."""
        request_details, error_message = self.document_service.get_pending_document_requests()

        if error_message:
            await update.message.reply_text(error_message)
            return

        message = "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
        keyboard = []

        for detail in request_details:
            req = detail['request']
            user = detail['user']
            doc_type = detail['document_type']

            message += f"‚Ññ {req.RequestID}: {doc_type.TypeName}, –°—Ç—É–¥–µ–Ω—Ç: {user.UserName}\n"
            keyboard.append([InlineKeyboardButton(f"–û–±—Ä–∞—Ç–∏ ‚Ññ{req.RequestID}", callback_data=f"handle_request_{req.RequestID}")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)

    async def handle_document_request(self, update: Update, context: CallbackContext):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        request_id = int(query.data.split('_')[2])

        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–ø—Ä–∞—Ü—é–≤–∞—Ç–∏", callback_data=f"process_doc_{request_id}")],
            [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_doc_{request_id}")]
        ]

        await query.edit_message_text(
            f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id}: –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    async def reject_document_request(self, update: Update, context: CallbackContext):
        """–í—ñ–¥—Ö–∏–ª—è—î –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç."""
        query = update.callback_query
        await query.answer()

        request_id = int(query.data.split('_')[2])

        success, chat_id, message = self.document_service.process_document_request(request_id, approve=False)

        if success:
            await context.bot.send_message(chat_id=chat_id, text=message)
            await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")
        else:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")

    async def process_document_request(self, update: Update, context: CallbackContext):
        """–û–ø—Ä–∞—Ü—å–æ–≤—É—î –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç."""
        query = update.callback_query
        await query.answer()

        request_id = int(query.data.split('_')[2])

        context.user_data["processing_request_id"] = request_id
        context.user_data["state"] = self.WAITING_FOR_SCAN_LINK

        await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç—É:")

    async def receive_scan_link(self, update: Update, context: CallbackContext):
        """–û–±—Ä–æ–±–ª—è—î –æ—Ç—Ä–∏–º–∞–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç—É."""
        if context.user_data.get("state") != self.WAITING_FOR_SCAN_LINK:
            return

        request_id = context.user_data.get("processing_request_id")
        if not request_id:
            await update.message.reply_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
            return

        scan_link = update.message.text.strip()

        success, chat_id, message = self.document_service.process_document_request_with_scan(
            request_id, scan_link, approve=True
        )

        if success:
            if chat_id:
                await context.bot.send_message(chat_id=chat_id, text=message)
            await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} –±—É–ª–∞ –æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞.")
        else:
            await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏.")

        context.user_data.pop("state", None)
        context.user_data.pop("processing_request_id", None)

