from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, CallbackContext, filters
)
from typing import List, Dict, Any, Optional

class PersonalQAController:
    def __init__(self, application, personal_qa_service,auth_service):
        self.application = application
        self.personal_qa_service = personal_qa_service
        self.auth_service =auth_service


        # –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        self.WAITING_FOR_QUESTION_TEXT = 1
        self.WAITING_FOR_QUESTION_CONFIRMATION = 2

        # –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–µ–∫–∞–Ω–∞—Ç—É
        self.VIEWING_QUESTIONS_LIST = 3
        self.WAITING_FOR_ANSWER_TEXT = 4
        self.WAITING_FOR_ANSWER_CONFIRMATION = 5

    def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å."""
        return [
            # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            ConversationHandler(
                entry_points=[
                    CommandHandler("ask_question", self.start_question_creation),
                    MessageHandler(filters.Regex('^–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è$'), self.start_question_creation),
                ],
                states={
                    self.WAITING_FOR_QUESTION_TEXT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_question_text)
                    ],
                    self.WAITING_FOR_QUESTION_CONFIRMATION: [
                        CallbackQueryHandler(self.confirm_question, pattern="^confirm_question$"),
                        CallbackQueryHandler(self.cancel_question, pattern="^cancel_question$")
                    ]
                },
                fallbacks=[CommandHandler("cancel", self.cancel_question_creation)]
            ),


            # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –¥–µ–∫–∞–Ω–∞—Ç—É
            ConversationHandler(
                entry_points=[
                    CommandHandler("view_student_questions", self.view_student_questions),
                    MessageHandler(filters.Regex('^–ü–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤$'), self.view_student_questions),
                ],
                states={
                    self.VIEWING_QUESTIONS_LIST: [
                        CallbackQueryHandler(self.select_question_to_answer, pattern="^answer_question_"),
                        CallbackQueryHandler(self.back_to_menu, pattern="^back_to_menu$"),
                    ],
                    self.WAITING_FOR_ANSWER_TEXT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_answer_text)
                    ],
                    self.WAITING_FOR_ANSWER_CONFIRMATION: [
                        CallbackQueryHandler(self.confirm_answer, pattern="^confirm_answer$"),
                        CallbackQueryHandler(self.edit_answer, pattern="^edit_answer$"),
                        CallbackQueryHandler(self.cancel_answer, pattern="^cancel_answer$")
                    ]
                },
                fallbacks=[CommandHandler("cancel", self.cancel_answer_process)]
            ),
        ]

    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (—Å—Ç—É–¥–µ–Ω—Ç)
    async def start_question_creation(self, update: Update, context: CallbackContext) -> int:
        """–†–æ–∑–ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        await update.effective_message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É. "
            "–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        )

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not context.user_data.get('question_data'):
            context.user_data['question_data'] = {}

        return self.WAITING_FOR_QUESTION_TEXT

    async def process_question_text(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞."""
        question_text = update.message.text

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        context.user_data['question_data']['text'] = question_text

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_question")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.effective_message.reply_text(
            f"–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n\n{question_text}\n\n"
            f"–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.",
            reply_markup=reply_markup
        )

        return self.WAITING_FOR_QUESTION_CONFIRMATION

    async def confirm_question(self, update: Update, context: CallbackContext) -> int:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        chat_id = update.effective_user.id
        question_text = context.user_data['question_data']['text']

        user = await self.auth_service.get_user_by_chat_id(chat_id)
        user_id = user.UserID
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        result = self.personal_qa_service.submit_question(user_id, question_text)

        if result['success']:
            await query.edit_message_text(
                f"‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É!\n\n"
                f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –Ω–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
            )
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {result['message']}\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('question_data', None)

        return ConversationHandler.END


    async def cancel_question(self, update: Update, context: CallbackContext) -> int:
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('question_data', None)

        return ConversationHandler.END

    async def cancel_question_creation(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        await update.effective_message.reply_text(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('question_data', None)

        return ConversationHandler.END

    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–≤–æ—ó—Ö –∑–∞–ø–∏—Ç–∞–Ω—å (—Å—Ç—É–¥–µ–Ω—Ç)
    async def view_my_questions(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å —Å—Ç—É–¥–µ–Ω—Ç–∞."""
        user_id = update.effective_user.id

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        result = self.personal_qa_service.get_student_questions(user_id)

        if not result['success']:
            await update.effective_message.reply_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å: {result['message']}"
            )
            return

        if result['total_count'] == 0:
            await update.effective_message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Ç–∞–Ω—å. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask_question, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."
            )
            return

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        text = "üìã <b>–í–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:</b>\n\n"

        if result['pending_questions']:
            text += "<b>‚è≥ –û—á—ñ–∫—É—é—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>\n"
            for i, q in enumerate(result['pending_questions'], 1):
                formatted_date = q['timestamp'].strftime('%d.%m.%Y %H:%M')
                text += f"{i}. <i>{formatted_date}</i> - {q['question'][:50]}...\n"
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π
                keyboard = [
                    [InlineKeyboardButton("üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"view_question_{q['question_id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.effective_message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
                text = ""  # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        if result['answered_questions']:
            text += "<b>‚úÖ –û—Ç—Ä–∏–º–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n"
            for i, q in enumerate(result['answered_questions'], 1):
                formatted_date = q['timestamp'].strftime('%d.%m.%Y %H:%M')
                text += f"{i}. <i>{formatted_date}</i> - {q['question'][:50]}...\n"
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π
                keyboard = [
                    [InlineKeyboardButton("üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", callback_data=f"view_question_{q['question_id']}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.effective_message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')
                text = ""  # –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    async def view_question_details(self, update: Update, context: CallbackContext):
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        # –í–∏—Ç—è–≥—É—î–º–æ ID –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ callback_data
        question_id = int(query.data.split('_')[-1])

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        result = self.personal_qa_service.get_question_with_context(question_id)

        if not result['success']:
            await query.edit_message_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {result['message']}"
            )
            return

        question = result['question']
        context_data = result['context']

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        text = f"<b>üìù –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ {context_data['formatted_date']}:</b>\n\n"
        text += f"{question['question']}\n\n"

        if question['status'] == 'pending':
            text += f"<b>‚è≥ –°—Ç–∞—Ç—É—Å:</b> –û—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
            text += f"<b>‚è±Ô∏è –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:</b> {context_data['waiting_time']}"
        else:
            text += f"<b>‚úÖ –°—Ç–∞—Ç—É—Å:</b> –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–æ\n"
            text += f"<b>üë§ –í—ñ–¥–ø–æ–≤—ñ–≤:</b> {question['answered_by_name']}\n\n"
            text += f"<b>üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å:</b>\n{question['answer']}"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω—å
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω—å", callback_data="back_to_questions")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def view_student_questions(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –¥–µ–∫–∞–Ω–∞—Ç—É."""
        user_id = update.effective_user.id

        # –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å
        await self.show_questions_list(update, context)

        return self.VIEWING_QUESTIONS_LIST

    async def show_questions_list(self, update: Update, context: CallbackContext):
        """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Ç–∞–Ω—å –±–µ–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó."""

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        result = self.personal_qa_service.get_all_unanswered_questions()

        if not result['success']:
            await update.effective_message.reply_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å: {result['message']}"
            )
            return

        questions = result['questions']

        if not questions:
            text = "üéâ –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_questions")],
                [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            if isinstance(update.callback_query, object):
                await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
            else:
                await update.effective_message.reply_text(text, reply_markup=reply_markup)
            return

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        text = "üìã <b>–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è</b>:\n\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        keyboard = []
        for q in questions:
            text += f"üë§ <b>{q['student_name']}</b> ({q['formatted_date']}):\n{q['short_question']}\n\n"

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
            keyboard.append([InlineKeyboardButton(
                f"‚úçÔ∏è –í—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ {q['student_name']}",
                callback_data=f"answer_question_{q['question_id']}"
            )])

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        keyboard.append([InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data="refresh_questions")])
        keyboard.append([InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –º–µ–Ω—é", callback_data="back_to_menu")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        if isinstance(update.callback_query, object):
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
        else:
            await update.effective_message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

    async def refresh_questions(self, update: Update, context: CallbackContext) -> int:
        """–û–Ω–æ–≤–ª—é—î —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å."""
        query = update.callback_query
        await query.answer()

        # –ü–æ–∫–∞–∑—É—î–º–æ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å
        await self.show_questions_list(update, context)

        return self.VIEWING_QUESTIONS_LIST

    async def select_question_to_answer(self, update: Update, context: CallbackContext) -> int:
            """–í–∏–±—ñ—Ä –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
            query = update.callback_query
            await query.answer()

            # –í–∏—Ç—è–≥—É—î–º–æ ID –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ callback_data
            question_id = int(query.data.split('_')[-1])
            context.user_data['selected_question_id'] = question_id

            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
            result = self.personal_qa_service.get_question_with_context(question_id)

            if not result['success']:
                await query.edit_message_text(
                    f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {result['message']}"
                )
                return self.VIEWING_QUESTIONS_LIST

            question = result['question']
            context_data = result['context']

            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            text = f"<b>üìù –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞ {question['student_name']} ({question['student_telegram']}):</b>\n\n"
            text += f"{question['question']}\n\n"

            text += f"<b>üìÖ –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</b> {context_data['formatted_date']}\n"
            text += f"<b>‚è±Ô∏è –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è:</b> {context_data['waiting_time']}"

            if context_data['is_urgent']:
                text += " <b>(–¢–µ—Ä–º—ñ–Ω–æ–≤–µ!)</b>"

            text += "\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:"

            await query.edit_message_text(text, parse_mode='HTML')

            return self.WAITING_FOR_ANSWER_TEXT

    async def process_answer_text(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–µ–∫–∞–Ω–∞—Ç—É."""
        answer_text = update.message.text

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        context.user_data['answer_text'] = answer_text

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_answer")],
            [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_answer")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_answer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.effective_message.reply_text(
            f"–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n{answer_text}\n\n"
            f"–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=reply_markup
        )

        return self.WAITING_FOR_ANSWER_CONFIRMATION

    async def confirm_answer(self, update: Update, context: CallbackContext) -> int:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        question_id = context.user_data['selected_question_id']
        answer_text = context.user_data['answer_text']

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        result = self.personal_qa_service.provide_answer(question_id, user_id, answer_text)

        if result['success']:
            await query.edit_message_text(
                f"‚úÖ –í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞!\n\n"
                f"–°—Ç—É–¥–µ–Ω—Ç –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
            )

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É –ø—Ä–æ –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if 'student_notification' in result:
                notification = result['student_notification']
                try:
                    await self.application.bot.send_message(
                        chat_id=notification['chat_id'],
                        text=notification['message'],
                        parse_mode='HTML'
                    )
                except Exception as e:
                    print(f"Failed to send notification to student: {str(e)}")
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result['message']}\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        for key in ['selected_question_id', 'answer_text']:
            context.user_data.pop(key, None)

        return ConversationHandler.END

    async def edit_answer(self, update: Update, context: CallbackContext) -> int:
        """–î–æ–∑–≤–æ–ª—è—î –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —â–µ —Ä–∞–∑."
        )

        return self.WAITING_FOR_ANSWER_TEXT

    async def cancel_answer(self, update: Update, context: CallbackContext) -> int:
        """–°–∫–∞—Å–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "‚ùå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        for key in ['selected_question_id', 'answer_text']:
            context.user_data.pop(key, None)

        return ConversationHandler.END

    async def cancel_answer_process(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        await update.effective_message.reply_text(
            "‚ùå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        for key in ['selected_question_id', 'answer_text']:
            context.user_data.pop(key, None)

        return ConversationHandler.END

    async def back_to_menu(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ."
        )

        return ConversationHandler.END

