from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, CallbackContext, filters
)

class PersonalQAController:
    def __init__(self, application, personal_qa_service, auth_service):
        self.application = application
        self.personal_qa_service = personal_qa_service
        self.auth_service = auth_service

        # –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
        self.WAITING_FOR_QUESTION_TEXT = 1
        self.WAITING_FOR_QUESTION_CONFIRMATION = 2

        # –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–µ–∫–∞–Ω–∞—Ç—É
        self.VIEWING_QUESTIONS_LIST = 3
        self.WAITING_FOR_ANSWER_TEXT = 4
        self.WAITING_FOR_ANSWER_CONFIRMATION = 5

    def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å."""
        return [
            # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            ConversationHandler(
                entry_points=[
                    CommandHandler("ask_question", self.start_question_creation),
                    MessageHandler(filters.Regex('^–ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è$'), self.start_question_creation),
                ],
                states={
                    self.WAITING_FOR_QUESTION_TEXT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_question_text)
                    ],
                    self.WAITING_FOR_QUESTION_CONFIRMATION: [
                        CallbackQueryHandler(self.confirm_question, pattern="^confirm_question$"),
                        CallbackQueryHandler(self.cancel_question, pattern="^cancel_question$")
                    ]
                },
                fallbacks=[CommandHandler("cancel", self.cancel_question_creation)]
            ),

            # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤ –¥–µ–∫–∞–Ω–∞—Ç—É
            ConversationHandler(
                entry_points=[
                    CommandHandler("view_questions", self.view_student_questions),
                    MessageHandler(filters.Regex('^–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤$'), self.view_student_questions),
                ],
                states={
                    self.VIEWING_QUESTIONS_LIST: [
                        CallbackQueryHandler(self.show_question_details, pattern="^question_(\d+)$")
                    ],
                    self.WAITING_FOR_ANSWER_TEXT: [
                        MessageHandler(filters.TEXT & ~filters.COMMAND, self.process_answer_text)
                    ],
                    self.WAITING_FOR_ANSWER_CONFIRMATION: [
                        CallbackQueryHandler(self.confirm_answer, pattern="^confirm_answer$"),
                        CallbackQueryHandler(self.cancel_answer, pattern="^cancel_answer$")
                    ]
                },
                fallbacks=[CommandHandler("cancel", self.cancel_answer_creation)]
            ),
        ]

    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (—Å—Ç—É–¥–µ–Ω—Ç)
    async def start_question_creation(self, update: Update, context: CallbackContext) -> int:
        """–†–æ–∑–ø–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        await update.effective_message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É. "
            "–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
        )

        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if not context.user_data.get('question_data'):
            context.user_data['question_data'] = {}

        return self.WAITING_FOR_QUESTION_TEXT

    async def process_question_text(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç–∞."""
        question_text = update.message.text

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        context.user_data['question_data']['text'] = question_text

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_question")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_question")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.effective_message.reply_text(
            f"–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:\n\n{question_text}\n\n"
            f"–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.",
            reply_markup=reply_markup
        )

        return self.WAITING_FOR_QUESTION_CONFIRMATION

    async def confirm_question(self, update: Update, context: CallbackContext) -> int:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        chat_id = update.effective_user.id
        question_text = context.user_data['question_data']['text']

        user = await self.auth_service.get_user_by_chat_id(chat_id)
        user_id = user.UserID
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        result = self.personal_qa_service.submit_question(user_id, question_text)

        if result['success']:
            await query.edit_message_text(
                f"‚úÖ –í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É!\n\n"
                f"–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∫–æ–ª–∏ –Ω–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å."
            )
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: {result['message']}\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('question_data', None)

        return ConversationHandler.END

    async def cancel_question(self, update: Update, context: CallbackContext) -> int:
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('question_data', None)

        return ConversationHandler.END

    async def cancel_question_creation(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        await update.effective_message.reply_text(
            "‚ùå –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('question_data', None)

        return ConversationHandler.END

    # –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è (–ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –¥–µ–∫–∞–Ω–∞—Ç—É)
    async def view_student_questions(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–ª—å dean_office
        chat_id = update.effective_user.id
        user = await self.auth_service.get_user_by_chat_id(chat_id)

        if not user or user.Role != 'dean_office':
            await update.effective_message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó."
            )
            return ConversationHandler.END

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Ç–∞–Ω—å
        questions = self.personal_qa_service.get_pending_questions()

        if not questions:
            await update.effective_message.reply_text(
                "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."
            )
            return ConversationHandler.END

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        keyboard = []
        for question in questions:
            button_text = f"{question['short_text']}"

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É
            keyboard.append([
                InlineKeyboardButton(button_text, callback_data=f"question_{question['id']}")
            ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.effective_message.reply_text(
            "üìù –°–ø–∏—Å–æ–∫ –Ω–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞–Ω—å –≤—ñ–¥ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:\n"
            "–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –Ω–∞–¥–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:",
            reply_markup=reply_markup
        )

        return self.VIEWING_QUESTIONS_LIST

    async def show_question_details(self, update: Update, context: CallbackContext) -> int:
        """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–±—Ä–∞–Ω–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."""
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ callback_data
        question_id = int(query.data.split('_')[1])

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
        context.user_data['answer_data'] = {'question_id': question_id}

        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è
        question_details = self.personal_qa_service.get_question_details(question_id)

        if not question_details:
            await query.edit_message_text(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            return ConversationHandler.END

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
        message = (
            f"üìù <b>–ó–∞–ø–∏—Ç–∞–Ω–Ω—è ‚Ññ{question_details['id']}</b>\n\n"
            f"<b>–°—Ç—É–¥–µ–Ω—Ç:</b> {question_details['user_name']} (@{question_details['telegram_tag']})\n"
        )

        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∞
        if 'group' in question_details:
            message += f"<b>–ì—Ä—É–ø–∞:</b> {question_details['group']}\n"

        message += (
            f"<b>–ß–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è:</b> {question_details['timestamp']}\n\n"
            f"<b>–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:</b>\n{question_details['question_text']}\n\n"
            f"üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è."
        )

        await query.edit_message_text(
            message,
            parse_mode="HTML"
        )

        return self.WAITING_FOR_ANSWER_TEXT

    async def process_answer_text(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞ –¥–µ–∫–∞–Ω–∞—Ç—É."""
        answer_text = update.message.text

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        context.user_data['answer_data']['text'] = answer_text

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm_answer")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_answer")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.effective_message.reply_text(
            f"–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:\n\n{answer_text}\n\n"
            f"–í—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ? –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è.",
            reply_markup=reply_markup
        )

        return self.WAITING_FOR_ANSWER_CONFIRMATION

    async def confirm_answer(self, update: Update, context: CallbackContext) -> int:
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
        query = update.callback_query
        await query.answer()

        chat_id = update.effective_user.id
        question_id = context.user_data['answer_data']['question_id']
        answer_text = context.user_data['answer_data']['text']

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await self.auth_service.get_user_by_chat_id(chat_id)

        if not user:
            await query.edit_message_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            return ConversationHandler.END

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
        result = self.personal_qa_service.answer_question(question_id, answer_text, user.UserID)

        if result['success']:
            await query.edit_message_text(
                "‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É!"
            )

            # –Ø–∫—â–æ —î chat_id —Å—Ç—É–¥–µ–Ω—Ç–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if result.get('student_chat_id'):
                try:
                    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, —â–æ–± –≤–∫–ª—é—á–∏—Ç–∏ –π–æ–≥–æ –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    question_details = self.personal_qa_service.get_question_details(question_id)

                    if question_details:
                        student_message = (
                            f"üì¨ <b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è</b>\n\n"
                            f"<b>–í–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:</b>\n{question_details['question_text']}\n\n"
                            f"<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –¥–µ–∫–∞–Ω–∞—Ç—É:</b>\n{answer_text}"
                        )

                        await context.bot.send_message(
                            chat_id=result['student_chat_id'],
                            text=student_message,
                            parse_mode="HTML"
                        )
                except Exception as e:
                    # –õ–æ–≥—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                    print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—É: {str(e)}")
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result['message']}\n\n"
                f"–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('answer_data', None)

        return ConversationHandler.END

    async def cancel_answer(self, update: Update, context: CallbackContext) -> int:
        """–°–∫–∞—Å–æ–≤—É—î —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        query = update.callback_query
        await query.answer()

        await query.edit_message_text(
            "‚ùå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('answer_data', None)

        return ConversationHandler.END

    async def cancel_answer_creation(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /cancel –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        await update.effective_message.reply_text(
            "‚ùå –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∫–∞—Å–æ–≤–∞–Ω–æ."
        )

        # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ
        context.user_data.pop('answer_data', None)

        return ConversationHandler.END