from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CallbackContext, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.ext import CallbackContext, CallbackQueryHandler, Application

from source.services.CourseService import CourseService

# –°—Ç–∞–Ω–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—É—Ä—Å—É
ADD_COURSE_NAME, ADD_COURSE_PLATFORM, ADD_COURSE_LINK = range(3)

# –°—Ç–∞–Ω–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü—ñ–π–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫—É—Ä—Å—É
DEACTIVATE_COURSE = range(1)

class CourseController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏ —á–µ—Ä–µ–∑ Telegram."""

    def __init__(self, application: Application, course_service:CourseService):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î CourseController.

        Args:
            application: –û–±'—î–∫—Ç Telegram Application
            course_service: –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫—É—Ä—Å–∞–º–∏
        """
        self.application = application
        self.course_service = course_service
        self.register_handlers()

    def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –∫—É—Ä—Å–∞–º–∏."""

        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        self.application.add_handler(CallbackQueryHandler(
            self.view_course_details,
            pattern="^studentcourse_\\d+$"
        ))

        # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
        self.application.add_handler(CallbackQueryHandler(
            self.view_course_students,
            pattern="^teachercourse_\\d+$"
        ))
        self.application.add_handler(CallbackQueryHandler(
            self.back_to_courses_list,
            pattern="^back_to_courses$"
        ))

    async def view_student_courses(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        """
        user = update.effective_user
        telegram_tag = user.username

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        courses = self.course_service.get_student_courses(telegram_tag, active_only=True)

        if not courses:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –∞–±–æ –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ —Å—Ç—É–¥–µ–Ω—Ç.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫—É—Ä—Å–∞–º–∏
        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(
                course["course_name"],
                callback_data=f"studentcourse_{course['course_id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            "üìö –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫—É—Ä—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
            reply_markup=reply_markup
        )

    async def view_course_details(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä—Å—É –∑ callback_data
        course_id = int(query.data.split("_")[1])

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        courses = self.course_service.get_student_courses(query.from_user.username, active_only=True)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫—É—Ä—Å –∑–∞ ID
        course = next((c for c in courses if c["course_id"] == course_id), None)

        if not course:
            await query.edit_message_text("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∫—É—Ä—Å—É
        message = f"üìö *{course['course_name']}*\n\n"
        message += f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {course['teacher']['name']}\n"
        message += f"üìß Email: {course['teacher']['email']}\n"

        if course['teacher']['phone'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
            message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {course['teacher']['phone']}\n"

        message += f"üìù –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"

        if course['meeting_link'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
            message += f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á: {course['meeting_link']}\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤", callback_data="back_to_courses")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")

    async def back_to_courses_list(self, update: Update, context: CallbackContext):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É –π–æ–≥–æ –∫—É—Ä—Å—ñ–≤.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        courses = self.course_service.get_student_courses(query.from_user.username, active_only=True)

        if not courses:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫—É—Ä—Å–∞–º–∏
        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(
                course["course_name"],
                callback_data=f"studentcourse_{course['course_id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üìö –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫—É—Ä—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
            reply_markup=reply_markup
        )

    async def view_teacher_courses(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ –æ–ø—Ü—ñ—è–º–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.
        """
        user = update.effective_user
        message_obj = update.message or update.callback_query.message

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞
        courses_list = self.course_service.get_teacher_courses(user.username, active_only=True)

        if not courses_list:
            if not self.course_service.is_teacher(user.username):
                await message_obj.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–ª–∞–¥–∞—á.")
                return
            else:
                message = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤."
        else:
            message = "üìö <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏:</b>\n\n"
            for course in courses_list:
                students = self.course_service.get_course_students(course["course_id"])
                student_count = len(students)

                message += f"<b>{course['course_name']}</b>\n"
                message += f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"
                message += f"–ü–æ—Å–∏–ª–∞–Ω–Ω—è: {course['meeting_link']}\n"
                message += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: {student_count}\n\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üë• –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤", callback_data="view_students")],
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫—É—Ä—Å", callback_data="add_course")],
            [InlineKeyboardButton("‚ùå –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫—É—Ä—Å", callback_data="deactivate_course")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await message_obj.reply_text(message, reply_markup=reply_markup, parse_mode='HTML')

    async def view_course_students(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—É—Ä—Å—ñ.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä—Å—É –∑ callback_data
        course_id = int(query.data.split("_")[1])

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –∫—É—Ä—Å—ñ
        students = self.course_service.get_course_students(course_id)

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å
        courses = self.course_service.get_teacher_courses(query.from_user.username)
        course = next((c for c in courses if c["course_id"] == course_id), None)

        if not course:
            await query.edit_message_text("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        if not students:
            message = f"–ù–∞ –∫—É—Ä—Å—ñ <b>{course['course_name']}</b> –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."
        else:
            message = f"üìö <b>–°—Ç—É–¥–µ–Ω—Ç–∏ –∫—É—Ä—Å—É: {course['course_name']}</b>\n\n"
            for i, student in enumerate(students, 1):
                message += f"{i}. <b>{student['student_name']}</b>\n"
                message += f"   Telegram: @{student['telegram_tag']}\n"
                if student['student_phone'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                    message += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {student['student_phone']}\n"
                message += "\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤", callback_data="back_to_courses")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="HTML")


    async def view_students(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –≤–∏–∫–ª–∞–¥–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫.
        –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫—É—Ä—Å –≤–∏–∫–ª–∞–¥–∞—á –∑–º–æ–∂–µ –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
        """
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—á–µ—Ä–µ–∑ message –∞–±–æ callback_query)
        user = update.effective_user
        message_obj = update.message or update.callback_query.message

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∞–¥–∞—á–µ–º
        if not self.course_service.is_teacher(user.username):
            await message_obj.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–ª–∞–¥–∞—á.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ service
        courses = self.course_service.get_teacher_courses(user.username, active_only=True)

        if not courses:
            await message_obj.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏
        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(
                course["course_name"],
                callback_data=f"teachercourse_{course['course_id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await message_obj.reply_text(
            "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:",
            reply_markup=reply_markup
        )