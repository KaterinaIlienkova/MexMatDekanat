from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, CallbackContext, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.ext import CallbackContext, CallbackQueryHandler, Application

from source.services.CourseService import CourseService




class CourseController:
    WAITING_FOR_COURSE_NAME = "waiting_for_course_name"
    WAITING_FOR_PLATFORM = "waiting_for_platform"
    WAITING_FOR_LINK = "waiting_for_link"
    """–ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏ —á–µ—Ä–µ–∑ Telegram."""

    def __init__(self, application: Application, course_service: CourseService):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î CourseController.

        Args:
            application: –û–±'—î–∫—Ç Telegram Application
            course_service: –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫—É—Ä—Å–∞–º–∏
        """
        self.application = application
        self.course_service = course_service

    def register_handlers(self):
        """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –∫—É—Ä—Å–∞–º–∏."""

        return [
            # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            CallbackQueryHandler(
                self.view_course_details,
                pattern="^studentcourse_\\d+$"
            ),

            # –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
            CallbackQueryHandler(
                self.view_course_students,
                pattern="^teachercourse_\\d+$"
            ),
            CallbackQueryHandler(
                self.back_to_courses_list,
                pattern="^back_to_courses$"
            ),
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É "–ú–æ—ó –∫—É—Ä—Å–∏"
            CallbackQueryHandler(
                self.view_teacher_course_options,
                pattern="^viewteachercourses$"
            ),

            CallbackQueryHandler(
                self.start_create_course,
                pattern="^create_course$"
            ),

            CallbackQueryHandler(
                self.show_archive_options,
                pattern="^archive_course$"
            ),

            CallbackQueryHandler(
                self.archive_selected_course,
                pattern="^archive_\\d+$"
            ),
            # –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            CallbackQueryHandler(
                self.start_add_student,
                pattern="^add_student_\\d+$"
            ),
            CallbackQueryHandler(
                self.select_group_for_add,
                pattern="^select_group_\\d+_\\d+$"
            ),
            CallbackQueryHandler(
                self.add_student_to_course,
                pattern="^add_student_to_course_\\d+_\\d+$"
            ),

            # –ù–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            CallbackQueryHandler(
                self.start_remove_student,
                pattern="^remove_student_\\d+$"
            ),
            CallbackQueryHandler(
                self.remove_student_from_course,
                pattern="^remove_student_from_course_\\d+_\\d+$"
            ),
        ]

    async def view_student_courses(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É –≤–∏–≥–ª—è–¥—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        """
        try:
            user = update.effective_user
            telegram_tag = user.username

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"view_student_courses –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {telegram_tag}")

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
            courses = self.course_service.get_student_courses(telegram_tag, active_only=True)

            if not courses:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –∞–±–æ –≤–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ —Å—Ç—É–¥–µ–Ω—Ç.")
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                keyboard.append([InlineKeyboardButton(
                    course["course_name"],
                    callback_data=f"studentcourse_{course['course_id']}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
            await update.message.reply_text(
                "üìö –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫—É—Ä—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —É view_student_courses: {e}")
            await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤.")

    async def view_course_details(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä—Å—É –∑ callback_data
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç callback_data
        callback_parts = query.data.split("_")
        if len(callback_parts) < 2 or not callback_parts[1].isdigit():
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫—É—Ä—Å.")
            return

        course_id = int(callback_parts[1])

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        courses = self.course_service.get_student_courses(query.from_user.username, active_only=True)

        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –∫—É—Ä—Å –∑–∞ ID
        course = next((c for c in courses if c["course_id"] == course_id), None)

        if not course:
            await query.edit_message_text("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –¥–µ—Ç–∞–ª—è–º–∏ –∫—É—Ä—Å—É
        message = f"üìö *{course['course_name']}*\n\n"
        message += f"üë®‚Äçüè´ –í–∏–∫–ª–∞–¥–∞—á: {course['teacher']['name']}\n"
        message += f"üìß Email: {course['teacher']['email']}\n"

        if course['teacher']['phone'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
            message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {course['teacher']['phone']}\n"

        message += f"üìù –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"

        if course['meeting_link'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
            message += f"üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á: {course['meeting_link']}\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤", callback_data="back_to_courses")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")

    async def back_to_courses_list(self, update: Update, context: CallbackContext):
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É –π–æ–≥–æ –∫—É—Ä—Å—ñ–≤.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        courses = self.course_service.get_student_courses(query.from_user.username, active_only=True)

        if not courses:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫—É—Ä—Å–∞–º–∏
        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(
                course["course_name"],
                callback_data=f"studentcourse_{course['course_id']}"
            )])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "üìö –í–∞—à—ñ –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫—É—Ä—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
            reply_markup=reply_markup
        )


    async def view_students(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –≤–∏–∫–ª–∞–¥–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ —É –≤–∏–≥–ª—è–¥—ñ –∫–Ω–æ–ø–æ–∫.
        –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫—É—Ä—Å –≤–∏–∫–ª–∞–¥–∞—á –∑–º–æ–∂–µ –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.
        """
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user = update.effective_user
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, –∑–≤—ñ–¥–∫–∏ –ø—Ä–∏–π—à–æ–≤ –∑–∞–ø–∏—Ç - –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –∑ callback
            message_obj = update.message or update.callback_query.message

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"view_students –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.username}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∞–¥–∞—á–µ–º
            if not self.course_service.is_teacher(user.username):
                await message_obj.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–ª–∞–¥–∞—á.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ —á–µ—Ä–µ–∑ service
            courses = self.course_service.get_teacher_courses(user.username, active_only=True)

            if not courses:
                await message_obj.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤.")
                return

            # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑ –∫—É—Ä—Å–∞–º–∏
            keyboard = []
            for course in courses:
                keyboard.append([InlineKeyboardButton(
                    course["course_name"],
                    callback_data=f"teachercourse_{course['course_id']}"
                )])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await message_obj.reply_text(
                "–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏. –û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:",
                reply_markup=reply_markup
            )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —É view_students: {e}")
            await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.")

    async def view_course_students(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫—É—Ä—Å—ñ —Ç–∞ –¥–æ–¥–∞—î –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º.
        """
        query = update.callback_query
        await query.answer()

        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫—É—Ä—Å—É –∑ callback_data
        try:
            callback_parts = query.data.split("_")
            if callback_parts[0] == "teachercourse" and len(callback_parts) > 1 and callback_parts[1].isdigit():
                course_id = int(callback_parts[1])
            else:
                # –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–∏ –∑ —ñ–Ω—à–æ–≥–æ –º—ñ—Å—Ü—è, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ ID –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                course_id = context.user_data.get("current_course_id")
                if course_id is None:
                    await query.edit_message_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä—Å.")
                    return
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_data —É view_course_students: {e}, data: {query.data}")
            await query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
            return

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –∫—É—Ä—Å—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ, —â–æ–± –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –π–æ–≥–æ –≤ —ñ–Ω—à–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
        context.user_data["current_course_id"] = course_id

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –∫—É—Ä—Å—ñ
        students = self.course_service.get_course_students(course_id)

        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å
        courses = self.course_service.get_teacher_courses(query.from_user.username)
        course = next((c for c in courses if c["course_id"] == course_id), None)

        if not course:
            await query.edit_message_text("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        if not students:
            message = f"–ù–∞ –∫—É—Ä—Å—ñ <b>{course['course_name']}</b> –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."
        else:
            message = f"üìö <b>–°—Ç—É–¥–µ–Ω—Ç–∏ –∫—É—Ä—Å—É: {course['course_name']}</b>\n\n"
            for i, student in enumerate(students, 1):
                # –î–æ–¥–∞—î–º–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –¥—É–∂–∫–∞—Ö –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ
                student_id = self.course_service.get_student_id_by_telegram(student['telegram_tag'])
                message += f"{i}. <b>{student['student_name']}</b>\n"
                message += f"   Telegram: @{student['telegram_tag']}\n"
                if student['student_phone'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                    message += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {student['student_phone']}\n"
                # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
                student_id_for_removal = student_id if student_id else i  # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ None
                message += f"   [ID: {student_id_for_removal}]\n"
                message += "\n"

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data=f"add_student_{course_id}")],
            [InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data=f"remove_student_{course_id}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫—É—Ä—Å—ñ–≤", callback_data="back_to_courses")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="HTML")

    async def start_add_student(self, update: Update, context: CallbackContext):
        """
        –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ –∫—É—Ä—Å—É - –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø.
        """
        query = update.callback_query
        await query.answer()

        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫—É—Ä—Å—É
        try:
            callback_parts = query.data.split("_")
            if len(callback_parts) >= 3 and callback_parts[2].isdigit():
                course_id = int(callback_parts[2])
            else:
                course_id = context.user_data.get("current_course_id")
                if course_id is None:
                    await query.edit_message_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä—Å.")
                    return
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_data —É start_add_student: {e}, data: {query.data}")
            await query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
            return

        context.user_data["current_course_id"] = course_id

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥—Ä—É–ø–∏
        groups = self.course_service.get_all_student_groups()

        if not groups:
            await query.edit_message_text(
                "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"teachercourse_{course_id}")
                ]])
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≥—Ä—É–ø–∞–º–∏
        keyboard = []
        for group in groups:
            keyboard.append([
                InlineKeyboardButton(
                    group["group_name"],
                    callback_data=f"select_group_{group['group_id']}_{course_id}"
                )
            ])

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"teachercourse_{course_id}")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫—É—Ä—Å—É:",
            reply_markup=reply_markup
        )

    async def select_group_for_add(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –≥—Ä—É–ø–∏ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –í–°–Ü–• —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ —Ü—ñ—î—ó –≥—Ä—É–ø–∏.
        """
        query = update.callback_query
        await query.answer()

        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –≥—Ä—É–ø–∏ —Ç–∞ –∫—É—Ä—Å—É –∑ callback_data
        try:
            parts = query.data.split("_")
            if len(parts) >= 4 and parts[2].isdigit() and parts[3].isdigit():
                group_id = int(parts[2])
                course_id = int(parts[3])
            else:
                await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
                return
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_data —É select_group_for_add: {e}, data: {query.data}")
            await query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
            return

        context.user_data["selected_group_id"] = group_id
        context.user_data["current_course_id"] = course_id

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –≥—Ä—É–ø–∏ –Ω–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
        students = self.course_service.get_all_students_by_group(group_id)

        if not students:
            await query.edit_message_text(
                "–£ —Ü—ñ–π –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"add_student_{course_id}")
                ]])
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
        keyboard = []
        for student in students:
            keyboard.append([
                InlineKeyboardButton(
                    student["student_name"],
                    callback_data=f"add_student_to_course_{student['student_id']}_{course_id}"
                )
            ])

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"add_student_{course_id}")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ –∫—É—Ä—Å—É:",
            reply_markup=reply_markup
        )

    async def add_student_to_course(self, update: Update, context: CallbackContext):
        """
        –î–æ–¥–∞—î –æ–±—Ä–∞–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ –∫—É—Ä—Å—É. –Ø–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç –≤–∂–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π,
        –ø–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ü–µ.
        """
        query = update.callback_query
        await query.answer()

        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–∞ –∫—É—Ä—Å—É –∑ callback_data
        try:
            parts = query.data.split("_")
            if len(parts) >= 6 and parts[4].isdigit() and parts[5].isdigit():
                student_id = int(parts[4])
                course_id = int(parts[5])

            else:
                await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.", show_alert=True)
                return
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_data —É add_student_to_course: {e}, data: {query.data}")
            await query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.", show_alert=True)
            return

        # –î–æ–¥–∞—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ –∫—É—Ä—Å—É
        success = self.course_service.add_student_to_course(student_id, course_id)

        if success:
            await query.answer("–°—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∫—É—Ä—Å—É!", show_alert=True)
        else:
            await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ –∫—É—Ä—Å—É.", show_alert=True)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∫—É—Ä—Å—É
        context.user_data["current_course_id"] = course_id
        await self.view_course_students(update, context)

    async def start_remove_student(self, update: Update, context: CallbackContext):
        """
        –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –∫—É—Ä—Å—É.
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∫—É—Ä—Å—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
        """
        query = update.callback_query
        await query.answer()

        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID –∫—É—Ä—Å—É
        try:
            callback_parts = query.data.split("_")
            if len(callback_parts) >= 3 and callback_parts[2].isdigit():
                course_id = int(callback_parts[2])
            else:
                course_id = context.user_data.get("current_course_id")
                if course_id is None:
                    await query.edit_message_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –∫—É—Ä—Å.")
                    return
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_data —É start_remove_student: {e}, data: {query.data}")
            await query.edit_message_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
            return

        context.user_data["current_course_id"] = course_id

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –∫—É—Ä—Å—ñ
        students = self.course_service.get_course_students(course_id)

        if not students:
            await query.edit_message_text(
                "–ù–∞ —Ü—å–æ–º—É –∫—É—Ä—Å—ñ –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"teachercourse_{course_id}")
                ]])
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ —Ç–∞ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        keyboard = []
        for i, student in enumerate(students):
            # –û—Ç—Ä–∏–º—É—î–º–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞
            student_id = self.course_service.get_student_id_by_telegram(student['telegram_tag'])
            if student_id:
                keyboard.append([
                    InlineKeyboardButton(
                        f"{i+1}. {student['student_name']} (@{student['telegram_tag']})",
                        callback_data=f"remove_student_from_course_{student_id}_{course_id}"
                    )
                ])

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard.append([
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"teachercourse_{course_id}")
        ])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∫—É—Ä—Å—É:",
            reply_markup=reply_markup
        )

    async def remove_student_from_course(self, update: Update, context: CallbackContext):
        """
        –í–∏–¥–∞–ª—è—î —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –∫—É—Ä—Å—É. –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —Å—Ç—É–¥–µ–Ω—Ç –¥—ñ–π—Å–Ω–æ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–∏–π –Ω–∞ –∫—É—Ä—Å.
        """
        query = update.callback_query
        await query.answer()

        # –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è ID —Å—Ç—É–¥–µ–Ω—Ç–∞ —Ç–∞ –∫—É—Ä—Å—É –∑ callback_data
        try:
            parts = query.data.split("_")
            if len(parts) >= 6 and parts[4].isdigit() and parts[5].isdigit():
                student_id = int(parts[4])
                course_id = int(parts[5])
            else:
                await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.", show_alert=True)
                return
        except (IndexError, ValueError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ callback_data —É remove_student_from_course: {e}, data: {query.data}")
            await query.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.", show_alert=True)
            return

        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –∫—É—Ä—Å—É
        success = self.course_service.remove_student_from_course(student_id, course_id)

        if success:
            await query.answer("–°—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫—É—Ä—Å—É!", show_alert=True)
        else:
            await query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –∫—É—Ä—Å—É.", show_alert=True)

        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∫—É—Ä—Å—É
        context.user_data["current_course_id"] = course_id
        await self.view_course_students(update, context)


    async def view_teacher_courses(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –≤–∏–∫–ª–∞–¥–∞—á—É —Å–ø–∏—Å–æ–∫ –π–æ–≥–æ –∫—É—Ä—Å—ñ–≤ —Ç–∞ –æ–ø—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∏–º–∏.
        """
        try:
            user = update.effective_user
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, –∑–≤—ñ–¥–∫–∏ –ø—Ä–∏–π—à–æ–≤ –∑–∞–ø–∏—Ç - –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∏ –∑ callback
            message_obj = update.message or update.callback_query.message

            # –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(f"view_teacher_courses –≤–∏–∫–ª–∏–∫–∞–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user.username}")

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–∫–ª–∞–¥–∞—á–µ–º
            if not self.course_service.is_teacher(user.username):
                await message_obj.reply_text("–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ –≤–∏–∫–ª–∞–¥–∞—á.")
                return

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫—É—Ä—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞
            courses = self.course_service.get_teacher_courses(user.username, active_only=True)

            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫—É—Ä—Å–∏
            if not courses:
                course_info = "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤."
            else:
                course_info = "üìö <b>–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏:</b>\n\n"
                for i, course in enumerate(courses, 1):
                    course_info += f"<b>{i}. {course['course_name']}</b>\n"
                    course_info += f"   üìù –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {course['study_platform']}\n"
                    if course['meeting_link'] != "–ù–µ –≤–∫–∞–∑–∞–Ω–æ":
                        course_info += f"   üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {course['meeting_link']}\n"
                    course_info += "\n"

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å—É –∞–±–æ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó —ñ—Å–Ω—É—é—á–æ–≥–æ
            keyboard = [
                [InlineKeyboardButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∫—É—Ä—Å", callback_data="create_course")],
                [InlineKeyboardButton("–ê—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ –∫—É—Ä—Å", callback_data="archive_course")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback –∞–±–æ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(
                    course_info,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
            else:
                await message_obj.reply_text(
                    course_info,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ —É view_teacher_courses: {e}")
            error_message = "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫—É—Ä—Å–∏."
            if update.callback_query:
                await update.callback_query.answer()
                await update.callback_query.edit_message_text(error_message)
            else:
                await update.message.reply_text(error_message)

    async def view_teacher_course_options(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î –æ–ø—Ü—ñ—ó –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫—É—Ä—Å–∞–º–∏ (–ø–æ–≤–µ—Ä—Ç–∞—î –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –∫—É—Ä—Å—ñ–≤).
        """
        await self.view_teacher_courses(update, context)

    async def start_create_course(self, update: Update, context: CallbackContext):
        """
        –ü–æ—á–∏–Ω–∞—î –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å—É.
        """
        query = update.callback_query
        await query.answer()

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –∫—É—Ä—Å—É
        context.user_data['state'] = self.WAITING_FOR_COURSE_NAME

        await query.edit_message_text(
            "üìù <b>–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å—É</b>\n\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫—É—Ä—Å—É:",
            parse_mode="HTML"
        )

    async def handle_course_creation_input(self, update: Update, context: CallbackContext):
        """
        –û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫—É—Ä—Å—É.
        """
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–Ω–∞—Ö–æ–¥–∏–º–æ—Å—è –≤ —Å—Ç–∞–Ω—ñ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—É—Ä—Å—É
        state = context.user_data.get('state')
        if not state or not state.startswith('waiting_for_'):
            return False  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ False, —è–∫—â–æ —Ü–µ –Ω–µ –Ω–∞—à–µ –≤–≤–µ–¥–µ–Ω–Ω—è

        text = update.message.text

        if state == self.WAITING_FOR_COURSE_NAME:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –∫—É—Ä—Å—É
            context.user_data['course_name'] = text
            context.user_data['state'] = self.WAITING_FOR_PLATFORM

            await update.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Zoom, Google Meet, —Ç–æ—â–æ).\n"
                "–Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≤–≤–µ–¥—ñ—Ç—å '-':"
            )
            return True

        elif state == self.WAITING_FOR_PLATFORM:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
            context.user_data['platform'] = None if text == '-' else text
            context.user_data['state'] = self.WAITING_FOR_LINK

            await update.message.reply_text(
                "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–ª—è –∫—É—Ä—Å—É.\n"
                "–Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ–º–∞—î, –≤–≤–µ–¥—ñ—Ç—å '-':"
            )
            return True

        elif state == self.WAITING_FOR_LINK:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫—É—Ä—Å
            link = None if text == '-' else text

            # –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–∞–Ω—ñ
            course_name = context.user_data.get('course_name')
            platform = context.user_data.get('platform')

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∫—É—Ä—Å
            success = self.course_service.create_course(
                update.effective_user.username,
                course_name,
                platform,
                link
            )

            # –û—á–∏—â—É—î–º–æ –¥–∞–Ω—ñ —Å—Ç–∞–Ω—É
            context.user_data.pop('state', None)
            context.user_data.pop('course_name', None)
            context.user_data.pop('platform', None)

            if success:
                await update.message.reply_text(
                    f"‚úÖ –ö—É—Ä—Å '{course_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!"
                )
                # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤
                await self.view_teacher_courses(update, context)
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫—É—Ä—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            return True

        return False  # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ —Ü–µ –Ω–µ –Ω–∞—à–µ –≤–≤–µ–¥–µ–Ω–Ω—è

    async def show_archive_options(self, update: Update, context: CallbackContext):
        """
        –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –∫—É—Ä—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞
        courses = self.course_service.get_teacher_courses(query.from_user.username, active_only=True)

        if not courses:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –∫—É—Ä—Å—É –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó
        keyboard = []
        for course in courses:
            keyboard.append([InlineKeyboardButton(
                course["course_name"],
                callback_data=f"archive_{course['course_id']}"
            )])

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="viewteachercourses")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            "–û–±–µ—Ä—ñ—Ç—å –∫—É—Ä—Å –¥–ª—è –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó:",
            reply_markup=reply_markup
        )

    async def archive_selected_course(self, update: Update, context: CallbackContext):
        """
        –ê—Ä—Ö—ñ–≤—É—î –≤–∏–±—Ä–∞–Ω–∏–π –∫—É—Ä—Å.
        """
        query = update.callback_query
        await query.answer()

        # –û—Ç—Ä–∏–º—É—î–º–æ ID –∫—É—Ä—Å—É –∑ callback_data
        course_id = int(query.data.split("_")[1])

        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∫—É—Ä—Å–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–∑–≤–∏
        courses = self.course_service.get_teacher_courses(query.from_user.username)
        course = next((c for c in courses if c["course_id"] == course_id), None)

        if not course:
            await query.edit_message_text("–ö—É—Ä—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ê—Ä—Ö—ñ–≤—É—î–º–æ –∫—É—Ä—Å
        success = self.course_service.archive_course(course_id)

        if success:
            await query.edit_message_text(
                f"‚úÖ –ö—É—Ä—Å '{course['course_name']}' —É—Å–ø—ñ—à–Ω–æ –∞—Ä—Ö—ñ–≤–æ–≤–∞–Ω–æ."
            )
            # –ü–æ–∫–∞–∑—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∫—É—Ä—Å—ñ–≤
            await self.view_teacher_courses(update, context)
        else:
            await query.edit_message_text(
                f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∞—Ä—Ö—ñ–≤—É–≤–∞—Ç–∏ –∫—É—Ä—Å '{course['course_name']}'. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )