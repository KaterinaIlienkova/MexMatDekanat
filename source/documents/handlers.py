
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler, CommandHandler, CallbackQueryHandler
from sqlalchemy import select
from datetime import datetime

from source.config import WAITING_FOR_SCAN_LINK
from source.database import SessionLocal
from source.models import User, Student, DocumentType, DocumentRequest

SELECT_DOCUMENT, CONFIRM_REQUEST = range(2)

async def doc_request(update: Update, context: CallbackContext):
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—É."""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç—É–¥–µ–Ω—Ç–æ–º
    with SessionLocal() as db:
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ChatID
        db_user = db.query(User).filter(User.ChatID == update.effective_chat.id).first()

        if not db_user or db_user.Role != 'student':
            await update.message.reply_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = db.query(Student).filter(Student.UserID == db_user.UserID).first()

        if not student:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É.")
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        document_types = db.query(DocumentType).all()

        if not document_types:
            await update.message.reply_text("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç–∏–ø–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
        keyboard = []
        for doc_type in document_types:
            keyboard.append([InlineKeyboardButton(doc_type.TypeName, callback_data=f"doc_select_{doc_type.TypeID}")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:",
            reply_markup=reply_markup
        )

async def select_document(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç—É."""
    query = update.callback_query
    await query.answer()

    # –û—Ç—Ä–∏–º—É—î–º–æ ID —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑ callback_data
    document_type_id = int(query.data.split('_')[2])

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å—Ç—É–¥–µ–Ω—Ç–∞
    with SessionLocal() as db:
        db_user = db.query(User).filter(User.ChatID == update.effective_chat.id).first()
        student = db.query(Student).filter(Student.UserID == db_user.UserID).first()

        document_type = db.query(DocumentType).filter(DocumentType.TypeID == document_type_id).first()

        if not document_type:
            await query.edit_message_text("–ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–∞–Ω–∏–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        keyboard = [
            [InlineKeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"doc_confirm_{document_type_id}_{student.StudentID}")],
            [InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_doc")]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            f"–í–∏ –æ–±—Ä–∞–ª–∏: {document_type.TypeName}\n\n–ë–∞–∂–∞—î—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?",
            reply_markup=reply_markup
        )

async def cancel_document_request(update: Update, context: CallbackContext):
    """–°–∫–∞—Å–æ–≤—É—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")



async def doc_requested(update: Update, context: CallbackContext):
    with SessionLocal() as db:
        pending_requests = db.query(DocumentRequest).filter(DocumentRequest.Status == 'pending').all()

        if not pending_requests:
            await update.message.reply_text("–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è.")
            return

        message = "üìÑ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
        keyboard = []

        for req in pending_requests:
            student = db.query(Student).filter(Student.StudentID == req.StudentID).first()
            user = db.query(User).filter(User.UserID == student.UserID).first()
            doc_type = db.query(DocumentType).filter(DocumentType.TypeID == req.TypeID).first()

            message += f"‚Ññ {req.RequestID}: {doc_type.TypeName}, –°—Ç—É–¥–µ–Ω—Ç: {user.UserName}\n"
            keyboard.append([InlineKeyboardButton(f"–û–±—Ä–∞—Ç–∏ ‚Ññ{req.RequestID}", callback_data=f"handle_request_{req.RequestID}")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup)

async def handle_doc_request(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    request_id = int(query.data.split('_')[2])

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û–ø—Ä–∞—Ü—é–≤–∞—Ç–∏", callback_data=f"process_doc_{request_id}")],
        [InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_doc_{request_id}")]
    ]

    await query.edit_message_text(
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id}: –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def reject_document_request(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    request_id = int(query.data.split('_')[2])

    with SessionLocal() as db:
        request = db.query(DocumentRequest).filter(DocumentRequest.RequestID == request_id).first()
        request.Status = 'rejected'
        db.commit()

        student = db.query(Student).filter(Student.StudentID == request.StudentID).first()
        user = db.query(User).filter(User.UserID == student.UserID).first()

        await context.bot.send_message(
            chat_id=user.ChatID,
            text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request.RequestID} –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞."
        )

    await query.edit_message_text(f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} –±—É–ª–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.")

async def process_document_request(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    request_id = int(query.data.split('_')[2])

    context.user_data["processing_request_id"] = request_id
    context.user_data["state"] = WAITING_FOR_SCAN_LINK
    await query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç—É:")

