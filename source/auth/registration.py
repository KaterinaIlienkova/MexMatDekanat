import telegram
from sqlalchemy.exc import SQLAlchemyError
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, ConversationHandler, MessageHandler, CommandHandler, \
    filters
from sqlalchemy.orm import Session

from source.config import WAITING_FOR_USER_ROLE, WAITING_FOR_USER_DETAILS, WAITING_FOR_STUDENT_DETAILS, \
    WAITING_FOR_EDIT_FIELD
from source.database import SessionLocal
from sqlalchemy import text
from typing import Any, Optional
from sqlalchemy.orm import Session
from source.models import User, Student, Teacher, StudentGroup, DeanOfficeStaff, Department, Specialty, DocumentRequest, \
    CourseEnrollment, Course, PersonalQuestion
import logging
from telegram.error import BadRequest

logger = logging.getLogger(__name__)

from source.models import Student, StudentGroup, Department, Teacher, User

async def check_registration(update: Update, context: CallbackContext) -> Optional[str]:
    with SessionLocal() as db:
        user = update.message.from_user
        telegram_tag = user.username
        chat_id = update.effective_chat.id

        if telegram_tag:
            update_chat_id(db, telegram_tag, chat_id)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—à–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ Telegram –≤—ñ–¥—Å—É—Ç–Ω—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.")
            return None

        existing_user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
        if not existing_user:
            context.user_data["state"] = WAITING_FOR_STUDENT_DETAILS
            context.user_data["new_telegram_tag"] = telegram_tag
            context.user_data["new_chat_id"] = chat_id
            context.user_data["new_role"] = "student"
            await update.message.reply_text(
                "üîí –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.\n\n"
                "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≥—Ä—É–ø—É, —Ä—ñ–∫ –≤—Å—Ç—É–ø—É —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º—É.\n\n"
                "üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
                "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ, +380961234567, –§–Ü-21, 2023, –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏"
            )
            return None
        elif not existing_user.IsConfirmed:
            await update.message.reply_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –¥–µ–∫–∞–Ω–∞—Ç—É.")
            return None
        return existing_user.Role



def get_user_role(session: Session, telegram_tag: str) -> str:
    """–û—Ç—Ä–∏–º—É—î —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ TelegramTag."""
    try:
        user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
        return user.Role if user else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
    except SQLAlchemyError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return "–ù–µ–≤—ñ–¥–æ–º–∏–π"

def update_chat_id(session: Session, telegram_tag: str, chat_id: int) -> bool:
    """–û–Ω–æ–≤–ª—é—î chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
        if user:
            user.ChatID = chat_id
            session.commit()
            return True
        return False
    except SQLAlchemyError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        session.rollback()
        return False



async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    role = await check_registration(update, context)
    if role is None:
        return  # –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π

    if role == "dean_office":
        keyboard = [[KeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"), KeyboardButton("–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
                     KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ Q&A"), KeyboardButton("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è"),
                     KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é"), KeyboardButton("–ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏")]]
    elif role == "student":
        keyboard = [[KeyboardButton("Q&A")],[KeyboardButton("–ú–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏")],[KeyboardButton("–ó–∞–º–æ–≤–∏—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç")]]  # Q&A –Ω–∞ –ø–∞–Ω–µ–ª—å—Ü—ñ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    elif role == "teacher":
        keyboard = [[KeyboardButton("–°–ø–∏—Å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")]]
    else:
        keyboard = []

    if keyboard:
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text(
            f"–í—ñ—Ç–∞—é, {update.message.from_user.username}! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ {role}.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"–í—ñ—Ç–∞—é, {update.message.from_user.username}! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ {role}."
        )


def add_user(session: Session, username: str, telegram_tag: str, role: str, phone_number: str, chat_id: Optional[int] = None, group_name: Optional[str] = None, admission_year: Optional[int] = None, email: Optional[str] = None, department_id: Optional[int] = None, position: Optional[str] = None) -> Optional[User]:
    """
    –î–æ–¥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª—ñ.
    """
    existing_user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
    if existing_user:
        return None  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = User(
        UserName=username,
        TelegramTag=telegram_tag,
        Role=role,
        PhoneNumber=phone_number,
        ChatID=chat_id,
        IsConfirmed=False  # –ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–¥–∞—é—Ç—å –∑–∞—è–≤–∫—É
    )

    session.add(user)
    session.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ UserID –Ω–µ –∫–æ–º—ñ—Ç—è—á–∏

    # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–æ–ª—ñ
    if role == "student" and group_name and admission_year:
        student_group = session.query(StudentGroup).filter_by(GroupName=group_name).first()
        if not student_group:
            session.rollback()
            raise ValueError(f"–ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        student = Student(
            UserID=user.UserID,
            GroupID=student_group.GroupID,
            AdmissionYear=admission_year
        )
        session.add(student)

    elif role == "teacher" and email and department_id:
        teacher = Teacher(
            UserID=user.UserID,
            Email=email,
            DepartmentID=department_id
        )
        session.add(teacher)

    elif role == "dean_office" and position:
        staff = DeanOfficeStaff(
            UserID=user.UserID,
            Position=position
        )
        session.add(staff)

    session.commit()
    return user



def add_student(session: Session, user_id: int, group_name: str, admission_year: int, specialty_name: Optional[str] = None) -> bool:
    """
    –î–æ–¥–∞—î –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —ñ –≥—Ä—É–ø–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É–ø—É –∑ —Ü—ñ—î—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user = session.query(User).filter_by(UserID=user_id).first()
        if not user:
            return False

        # –®—É–∫–∞—î–º–æ –≥—Ä—É–ø—É
        student_group = session.query(StudentGroup).filter_by(GroupName=group_name).first()

        # –Ø–∫—â–æ –≥—Ä—É–ø–∏ –Ω–µ–º–∞—î —ñ –≤–∫–∞–∑–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É–ø—É
        if not student_group and specialty_name:
            # –®—É–∫–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å
            specialty = session.query(Specialty).filter_by(Name=specialty_name).first()
            if not specialty:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                specialty = Specialty(Name=specialty_name)
                session.add(specialty)
                session.flush()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É–ø—É
            student_group = StudentGroup(
                GroupName=group_name,
                SpecialtyID=specialty.SpecialtyID
            )
            session.add(student_group)
            session.flush()
        elif not student_group:
            return False  # –ì—Ä—É–ø–∞ –Ω–µ —ñ—Å–Ω—É—î —ñ –Ω–µ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        new_student = Student(
            UserID=user_id,
            GroupID=student_group.GroupID,
            AdmissionYear=admission_year
        )

        session.add(new_student)
        session.commit()
        return True
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞: %s", e)
        session.rollback()
        return False


def add_teacher(session: Session, user_id: int, email: str, department_id: int) -> bool:
    """
    –î–æ–¥–∞—î –∑–∞–ø–∏—Å –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user = session.query(User).filter_by(UserID=user_id).first()
        if not user:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
        department = session.query(Department).filter_by(DepartmentID=department_id).first()
        if not department:
            return False

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–ª–∞–¥–∞—á–∞
        new_teacher = Teacher(
            UserID=user_id,
            Email=email,
            DepartmentID=department_id
        )

        session.add(new_teacher)
        session.commit()
        return True
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏–∫–ª–∞–¥–∞—á–∞: %s", e)
        session.rollback()
        return False


async def save_new_user(update: Update, context: CallbackContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î —á–µ—Ä–µ–∑ ORM."""
    with SessionLocal() as db:
        user = add_user(db, context.user_data["new_user_name"], context.user_data["new_telegram_tag"],
                        context.user_data["new_role"], context.user_data["new_phone"],context.user_data["new_chat_id"])
        if user is None:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º TelegramTag –≤–∂–µ —ñ—Å–Ω—É—î.")
            return

        role = context.user_data["new_role"]
        success = False

        if role == "student":
            success = add_student(db, user.UserID, context.user_data["new_group"],
                                  context.user_data["new_admission_year"], context.user_data["new_specialty"])
        elif role == "teacher":
            success = add_teacher(db, user.UserID, context.user_data["new_email"], context.user_data["new_department"])

        if success:
            await update.message.reply_text(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ {role}.")

    context.user_data.clear()

async def prompt_user_details(update: Update, context: CallbackContext):
    context.user_data["state"] = WAITING_FOR_USER_ROLE  # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —Ü–µ–π —Ä—è–¥–æ–∫ —î —É —Ñ—É–Ω–∫—Ü—ñ—ó
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: student –∞–±–æ teacher")
def confirm_user(session: Session, telegram_tag: str) -> bool:
    user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
    if user and not user.IsConfirmed:
        user.IsConfirmed = True
        session.commit()
        return True
    return False

def delete_user(session: Session, telegram_tag: str) -> bool:
    """–í–∏–¥–∞–ª—è—î –∑–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é."""
    try:
        user = session.query(User).filter_by(TelegramTag=telegram_tag).first()

        if not user:
            return False  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

        # –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ª–µ–∂–Ω—ñ –∑–∞–ø–∏—Å–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
        if user.Role == "student":
            session.query(DocumentRequest).filter_by(StudentID=user.students.StudentID).delete()
            session.query(CourseEnrollment).filter_by(StudentID=user.students.StudentID).delete()
            session.delete(user.students)

        elif user.Role == "teacher":
            session.query(Course).filter_by(TeacherID=user.teachers.TeacherID).delete()
            session.delete(user.teachers)

        elif user.Role == "dean_office":
            session.delete(user.dean_office_staff)

        # –í–∏–¥–∞–ª—è—î–º–æ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è
        session.query(PersonalQuestion).filter_by(UserID=user.UserID).delete()

        # –í–∏–¥–∞–ª—è—î–º–æ —Å–∞–º–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        session.delete(user)
        session.commit()

        return True

    except SQLAlchemyError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        session.rollback()
        return False


async def delete_user_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data == "cancel_delete":
        await query.edit_message_text("‚ùå –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ TelegramTag —ñ–∑ callback_data
    try:
        telegram_tag = callback_data.replace("delete_", "")

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SessionLocal —è–∫ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        with SessionLocal() as db:
            success = delete_user(db, telegram_tag)

            if success:
                await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞—è–≤–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except Exception as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        await query.edit_message_text("üö® –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏.")


async def confirm_delete_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    telegram_tag = query.data.replace("confirm_delete_", "")

    with SessionLocal() as db:
        user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
        if user:
            db.delete(user)
            db.commit()
            await query.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ @{telegram_tag} –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")


def update_user(session: Session, telegram_tag: str, new_data: dict) -> bool:
    user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
    if user:
        for key, value in new_data.items():
            if hasattr(user, key):
                setattr(user, key, value)
        session.commit()
        return True
    return False



async def confirm_command(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /confirm telegram_tag")
        return
    telegram_tag = context.args[0]
    with SessionLocal() as db:
        if confirm_user(db, telegram_tag):
            await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ @{telegram_tag}.")


async def confirm(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ—Ö –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    with SessionLocal() as db:
        unconfirmed_users = db.query(User).filter_by(IsConfirmed=False, Role='student').all()

        if not unconfirmed_users:
            await update.message.reply_text("–ù–µ–º–∞—î –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —É—Å—ñ—Ö –∑–∞—è–≤–æ–∫
        message_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n\n"

        keyboard = []
        row = []

        for i, user in enumerate(unconfirmed_users, 1):
            # –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            message_text += f"#{i} - {user.UserName} (@{user.TelegramTag})\n"
            message_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.PhoneNumber or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = db.query(Student).filter_by(UserID=user.UserID).first()
            if student:
                group = db.query(StudentGroup).filter_by(GroupID=student.GroupID).first()
                group_name = group.GroupName if group else "–ù–µ–≤—ñ–¥–æ–º–∞"
                message_text += f"üë®‚Äçüéì –ì—Ä—É–ø–∞: {group_name}\n"
                message_text += f"üìÖ –†—ñ–∫ –≤—Å—Ç—É–ø—É: {student.AdmissionYear}\n"

            message_text += "\n"

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            button = InlineKeyboardButton(f"‚úÖ #{i}", callback_data=f"confirm_{user.TelegramTag}")
            edit_button = InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{user.TelegramTag}")
            delete_button = InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{user.TelegramTag}")

            row.append(button)
            row.append(edit_button)
            row.append(delete_button)

            if len(row) == 3 or i == len(unconfirmed_users):
                keyboard.append(row)
                row = []

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        keyboard.append([InlineKeyboardButton("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_confirmation")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message_text + "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é, –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —á–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
            reply_markup=reply_markup
        )


# async def confirm_callback_handler(update: Update, context: CallbackContext) -> None:
#     """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
#     query = update.callback_query
#     logging.info(f"confirm_callback_handler –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç: {query.data}")
#     await query.answer()
#     logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback-–∑–∞–ø–∏—Ç: {query.data}")
#
#     if query.data == "cancel_confirmation":
#         await query.edit_message_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
#         return
#
#
#     if query.data.startswith("edit_"):
#         telegram_tag = query.data.replace("edit_", "")
#         await query.message.reply_text(f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è @{telegram_tag} —É —Ñ–æ—Ä–º–∞—Ç—ñ: '–ü–æ–ª–µ=–∑–Ω–∞—á–µ–Ω–Ω—è, –ü–æ–ª–µ=–∑–Ω–∞—á–µ–Ω–Ω—è'")
#         context.user_data["edit_user"] = telegram_tag
#         return
#
#     if query.data.startswith("delete_"):
#         telegram_tag = query.data.replace("delete_", "")
#         with SessionLocal() as db:
#             if delete_user(db, telegram_tag):
#                 await query.edit_message_text(f"üóë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} –≤–∏–¥–∞–ª–µ–Ω–æ.")
#             else:
#                 await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ @{telegram_tag}.")
#         return
#     else:
#         # –û—Ç—Ä–∏–º—É—î–º–æ telegram_tag –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#         telegram_tag = query.data.replace("confirm_", "")
#
#         # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
#         with SessionLocal() as db:
#             if confirm_user(db, telegram_tag):
#                 # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
#                 user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
#                 username = user.UserName if user else telegram_tag
#
#                 await query.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (@{telegram_tag}) —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
#
#                 # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
#                 if user and user.ChatID:
#                     try:
#                         await context.bot.send_message(
#                             chat_id=user.ChatID,
#                             text="‚úÖ –í–∞—à—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Å–∏—Å—Ç–µ–º–∏."
#                         )
#                     except Exception as e:
#                         logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")
#             else:
#                 await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag}.")

async def edit_user_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    query = update.callback_query
    await query.answer()

    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è TelegramTag –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏
    telegram_tag = query.data.replace("edit_", "")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    keyboard = [
        [
            InlineKeyboardButton("–Ü–º'—è", callback_data=f"edit_name_{telegram_tag}"),
            InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_phone_{telegram_tag}")
        ],
        [
            InlineKeyboardButton("–ì—Ä—É–ø–∞", callback_data=f"edit_group_{telegram_tag}"),
            InlineKeyboardButton("–†—ñ–∫ –≤—Å—Ç—É–ø—É", callback_data=f"edit_year_{telegram_tag}")
        ],
        [InlineKeyboardButton("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_edit")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í–∏–±–µ—Ä—ñ—Ç—å, —è–∫–µ –ø–æ–ª–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag}:",
        reply_markup=reply_markup
    )

async def edit_field_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    query = update.callback_query
    await query.answer()

    if query.data == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    # –†–æ–∑–±–∏—Ä–∞—î–º–æ callback_data –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–ª—è —Ç–∞ telegram_tag
    parts = query.data.split("_")
    field = parts[1]  # name, phone, group, year
    telegram_tag = parts[2]

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—ñ
    context.user_data["edit_field"] = field
    context.user_data["edit_user_tag"] = telegram_tag

    field_names = {
        "name": "—ñ–º'—è",
        "phone": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
        "group": "–≥—Ä—É–ø—É",
        "year": "—Ä—ñ–∫ –≤—Å—Ç—É–ø—É"
    }

    # –í–∞–∂–ª–∏–≤–æ: –Ω–µ —Ä–µ–¥–∞–≥—É–π—Ç–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ
    await query.edit_message_text(f"–û—á—ñ–∫—É—é –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {field_names[field]}...")
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è '{field_names[field]}' –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag}:"
    )

async def process_edit_value(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω–µ –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –æ–Ω–æ–≤–ª—é—î –±–∞–∑—É –¥–∞–Ω–∏—Ö"""
    new_value = update.message.text
    field = context.user_data.get("edit_field")
    telegram_tag = context.user_data.get("edit_user_tag")

    if not field or not telegram_tag:
        await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    with SessionLocal() as db:
        user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
        if not user:
            await update.message.reply_text(f"‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END

        try:
            if field == "name":
                user.UserName = new_value
                db.commit()
            elif field == "phone":
                user.PhoneNumber = new_value
                db.commit()
            elif field == "year":
                student = db.query(Student).filter_by(UserID=user.UserID).first()
                if student:
                    try:
                        year = int(new_value)
                        student.AdmissionYear = year
                        db.commit()
                    except ValueError:
                        await update.message.reply_text("‚ùå –†—ñ–∫ –≤—Å—Ç—É–ø—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
                        return ConversationHandler.END
                else:
                    await update.message.reply_text("‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —Å—Ç—É–¥–µ–Ω—Ç–æ–º.")
                    return ConversationHandler.END
            elif field == "group":
                student = db.query(Student).filter_by(UserID=user.UserID).first()
                if student:
                    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≥—Ä—É–ø–∞ –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º
                    group = db.query(StudentGroup).filter_by(GroupName=new_value).first()
                    if group:
                        student.GroupID = group.GroupID
                        db.commit()
                    else:
                        # –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ ID –≥—Ä—É–ø–∏ –∑–∞–º—ñ—Å—Ç—å –Ω–∞–∑–≤–∏
                        try:
                            group_id = int(new_value)
                            group = db.query(StudentGroup).filter_by(GroupID=group_id).first()
                            if group:
                                student.GroupID = group_id
                                db.commit()
                            else:
                                await update.message.reply_text(f"‚ùå –ì—Ä—É–ø—É –∑ ID {group_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                                return ConversationHandler.END
                        except ValueError:
                            await update.message.reply_text("‚ùå –¢–∞–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–µ —ñ—Å–Ω—É—î.")
                            return ConversationHandler.END
                else:
                    await update.message.reply_text("‚ùå –¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î —Å—Ç—É–¥–µ–Ω—Ç–æ–º.")
                    return ConversationHandler.END

            await update.message.reply_text(f"‚úÖ –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.")

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –∑–º—ñ–Ω—É –π–æ–≥–æ –¥–∞–Ω–∏—Ö
            if user.ChatID:
                field_names = {
                    "name": "—ñ–º'—è",
                    "phone": "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                    "group": "–≥—Ä—É–ø–∞",
                    "year": "—Ä—ñ–∫ –≤—Å—Ç—É–ø—É"
                }
                try:
                    await context.bot.send_message(
                        chat_id=user.ChatID,
                        text=f"‚ÑπÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑–º—ñ–Ω–∏–≤ –≤–∞—à—ñ –¥–∞–Ω—ñ: {field_names[field]} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_value}'."
                    )
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")

        except SQLAlchemyError as e:
            logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
            db.rollback()
            await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    # –°–∫–∏–¥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    if "edit_field" in context.user_data:
        del context.user_data["edit_field"]
    if "edit_user_tag" in context.user_data:
        del context.user_data["edit_user_tag"]

    return ConversationHandler.END

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –≥—Ä—É–ø –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –≤–∏–±–æ—Ä—É
async def get_groups_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≥—Ä—É–ø"""
    with SessionLocal() as db:
        groups = db.query(StudentGroup).all()

        if not groups:
            await update.message.reply_text("‚ùå –£ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –≥—Ä—É–ø–∏.")
            return

        message_text = "üìã –î–æ—Å—Ç—É–ø–Ω—ñ –≥—Ä—É–ø–∏:\n\n"
        for group in groups:
            message_text += f"ID: {group.GroupID} - {group.GroupName}\n"

        await update.message.reply_text(message_text)

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ callback-–∑–∞–ø–∏—Ç—ñ–≤
async def confirm_callback_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    query = update.callback_query
    logging.info(f"confirm_callback_handler –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç: {query.data}")
    await query.answer()

    # –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö callback_data
    if query.data == "cancel_confirmation":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return
    elif query.data == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return
    elif query.data.startswith("edit_"):
        if len(query.data.split("_")) == 2:  # –§–æ—Ä–º–∞—Ç: edit_username
            await edit_user_handler(update, context)
            return
        elif len(query.data.split("_")) == 3:  # –§–æ—Ä–º–∞—Ç: edit_field_username
            await edit_field_handler(update, context)
            return
    elif query.data.startswith("delete_"):
        telegram_tag = query.data.replace("delete_", "")
        with SessionLocal() as db:
            if delete_user(db, telegram_tag):
                await query.edit_message_text(f"üóë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} –≤–∏–¥–∞–ª–µ–Ω–æ.")
            else:
                await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ @{telegram_tag}.")
        return
    elif query.data.startswith("confirm_"):
        # –û—Ç—Ä–∏–º—É—î–º–æ telegram_tag –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        telegram_tag = query.data.replace("confirm_", "")

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        with SessionLocal() as db:
            if confirm_user(db, telegram_tag):
                # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
                username = user.UserName if user else telegram_tag

                await query.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (@{telegram_tag}) —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")

                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
                if user and user.ChatID:
                    try:
                        await context.bot.send_message(
                            chat_id=user.ChatID,
                            text="‚úÖ –í–∞—à—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Å–∏—Å—Ç–µ–º–∏."
                        )
                    except Exception as e:
                        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")
            else:
                await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag}.")
# –î–æ–¥–∞–≤–∞–Ω–Ω—è ConversationHandler –¥–ª—è –ø—Ä–æ—Ü–µ—Å—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
edit_conv_handler = ConversationHandler(
    entry_points=[
        CallbackQueryHandler(edit_field_handler, pattern=r"^edit_[a-z]+_\w+$")
    ],
    states={
        "AWAITING_EDIT_VALUE": [MessageHandler(filters.TEXT & ~filters.COMMAND, process_edit_value)]
    },
    fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤ –¥–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
def register_edit_handlers(application):
    """–†–µ—î—Å—Ç—Ä—É—î –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    application.add_handler(edit_conv_handler)
    application.add_handler(CommandHandler("groups", get_groups_list))
