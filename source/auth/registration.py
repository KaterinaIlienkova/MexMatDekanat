from sqlalchemy.exc import SQLAlchemyError
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler
from sqlalchemy.orm import Session

from source.config import WAITING_FOR_USER_ROLE, WAITING_FOR_USER_DETAILS, WAITING_FOR_STUDENT_DETAILS
from source.database import SessionLocal
from sqlalchemy import text
from typing import Any, Optional
from sqlalchemy.orm import Session
from source.models import User, Student, Teacher, StudentGroup, DeanOfficeStaff, Department, Specialty
import logging
logger = logging.getLogger(__name__)

from source.models import Student, StudentGroup, Department, Teacher, User

async def check_registration(update: Update, context: CallbackContext) -> Optional[str]:
    with SessionLocal() as db:
        user = update.message.from_user
        telegram_tag = user.username
        chat_id = update.effective_chat.id

        if telegram_tag:
            update_chat_id(db, telegram_tag, chat_id)
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—à–æ–º—É –ø—Ä–æ—Ñ—ñ–ª—ñ Telegram –≤—ñ–¥—Å—É—Ç–Ω—î —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –π–æ–≥–æ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö Telegram.")
            return None

        existing_user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
        if not existing_user:
            context.user_data["state"] = WAITING_FOR_STUDENT_DETAILS
            context.user_data["new_telegram_tag"] = telegram_tag
            context.user_data["new_chat_id"] = chat_id
            context.user_data["new_role"] = "student"
            await update.message.reply_text(
                "üîí –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.\n\n"
                "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –≥—Ä—É–ø—É, —Ä—ñ–∫ –≤—Å—Ç—É–ø—É —Ç–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–º—É.\n\n"
                "üìå –ü—Ä–∏–∫–ª–∞–¥:\n"
                "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ, +380961234567, –§–Ü-21, 2023, –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏"
            )
            return None
        elif not existing_user.IsConfirmed:
            await update.message.reply_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–æ–º –¥–µ–∫–∞–Ω–∞—Ç—É.")
            return None
        return existing_user.Role



def get_user_role(session: Session, telegram_tag: str) -> str:
    """–û—Ç—Ä–∏–º—É—î —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ TelegramTag."""
    try:
        user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
        return user.Role if user else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
    except SQLAlchemyError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        return "–ù–µ–≤—ñ–¥–æ–º–∏–π"

def update_chat_id(session: Session, telegram_tag: str, chat_id: int) -> bool:
    """–û–Ω–æ–≤–ª—é—î chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    try:
        user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
        if user:
            user.ChatID = chat_id
            session.commit()
            return True
        return False
    except SQLAlchemyError as e:
        logger.exception(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ chat_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
        session.rollback()
        return False



async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    role = await check_registration(update, context)
    if role is None:
        return  # –í–∏—Ö–æ–¥–∏–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π

    if role == "dean_office":
        keyboard = [[KeyboardButton("–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó"), KeyboardButton("–î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"),
                     KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ Q&A"), KeyboardButton("–û–≥–æ–ª–æ—à–µ–Ω–Ω—è"), KeyboardButton("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")]]
    elif role == "student":
        keyboard = [[KeyboardButton("Q&A")],[KeyboardButton("–ú–æ—ó –ø–æ—Ç–æ—á–Ω—ñ –∫—É—Ä—Å–∏")]]  # Q&A –Ω–∞ –ø–∞–Ω–µ–ª—å—Ü—ñ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    elif role == "teacher":
        keyboard = [[KeyboardButton("–°–ø–∏—Å–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤")]]
    else:
        keyboard = []

    if keyboard:
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
        await update.message.reply_text(
            f"–í—ñ—Ç–∞—é, {update.message.from_user.username}! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ {role}.",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            f"–í—ñ—Ç–∞—é, {update.message.from_user.username}! –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ {role}."
        )


def add_user(session: Session, username: str, telegram_tag: str, role: str, phone_number: str, chat_id: Optional[int] = None, group_name: Optional[str] = None, admission_year: Optional[int] = None, email: Optional[str] = None, department_id: Optional[int] = None, position: Optional[str] = None) -> Optional[User]:
    """
    –î–æ–¥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Å —É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —Ç–∞–±–ª–∏—Ü—é –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–ª—ñ.
    """
    existing_user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
    if existing_user:
        return None  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = User(
        UserName=username,
        TelegramTag=telegram_tag,
        Role=role,
        PhoneNumber=phone_number,
        ChatID=chat_id,
        IsConfirmed=False  # –ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –ø–æ–¥–∞—é—Ç—å –∑–∞—è–≤–∫—É
    )

    session.add(user)
    session.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ UserID –Ω–µ –∫–æ–º—ñ—Ç—è—á–∏

    # –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–æ–ª—ñ
    if role == "student" and group_name and admission_year:
        student_group = session.query(StudentGroup).filter_by(GroupName=group_name).first()
        if not student_group:
            session.rollback()
            raise ValueError(f"–ì—Ä—É–ø–∞ '{group_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

        student = Student(
            UserID=user.UserID,
            GroupID=student_group.GroupID,
            AdmissionYear=admission_year
        )
        session.add(student)

    elif role == "teacher" and email and department_id:
        teacher = Teacher(
            UserID=user.UserID,
            Email=email,
            DepartmentID=department_id
        )
        session.add(teacher)

    elif role == "dean_office" and position:
        staff = DeanOfficeStaff(
            UserID=user.UserID,
            Position=position
        )
        session.add(staff)

    session.commit()
    return user



def add_student(session: Session, user_id: int, group_name: str, admission_year: int, specialty_name: Optional[str] = None) -> bool:
    """
    –î–æ–¥–∞—î –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    –Ø–∫—â–æ –≤–∫–∞–∑–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å —ñ –≥—Ä—É–ø–∞ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É –≥—Ä—É–ø—É –∑ —Ü—ñ—î—é —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user = session.query(User).filter_by(UserID=user_id).first()
        if not user:
            return False

        # –®—É–∫–∞—î–º–æ –≥—Ä—É–ø—É
        student_group = session.query(StudentGroup).filter_by(GroupName=group_name).first()

        # –Ø–∫—â–æ –≥—Ä—É–ø–∏ –Ω–µ–º–∞—î —ñ –≤–∫–∞–∑–∞–Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É–ø—É
        if not student_group and specialty_name:
            # –®—É–∫–∞—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å
            specialty = session.query(Specialty).filter_by(Name=specialty_name).first()
            if not specialty:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å, —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
                specialty = Specialty(Name=specialty_name)
                session.add(specialty)
                session.flush()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –≥—Ä—É–ø—É
            student_group = StudentGroup(
                GroupName=group_name,
                SpecialtyID=specialty.SpecialtyID
            )
            session.add(student_group)
            session.flush()
        elif not student_group:
            return False  # –ì—Ä—É–ø–∞ –Ω–µ —ñ—Å–Ω—É—î —ñ –Ω–µ –º–æ–∂–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—Å—Ç—ñ

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        new_student = Student(
            UserID=user_id,
            GroupID=student_group.GroupID,
            AdmissionYear=admission_year
        )

        session.add(new_student)
        session.commit()
        return True
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞: %s", e)
        session.rollback()
        return False


def add_teacher(session: Session, user_id: int, email: str, department_id: int) -> bool:
    """
    –î–æ–¥–∞—î –∑–∞–ø–∏—Å –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        user = session.query(User).filter_by(UserID=user_id).first()
        if not user:
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
        department = session.query(Department).filter_by(DepartmentID=department_id).first()
        if not department:
            return False

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–ª–∞–¥–∞—á–∞
        new_teacher = Teacher(
            UserID=user_id,
            Email=email,
            DepartmentID=department_id
        )

        session.add(new_teacher)
        session.commit()
        return True
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏–∫–ª–∞–¥–∞—á–∞: %s", e)
        session.rollback()
        return False


async def save_new_user(update: Update, context: CallbackContext):
    """–ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î —á–µ—Ä–µ–∑ ORM."""
    with SessionLocal() as db:
        user = add_user(db, context.user_data["new_user_name"], context.user_data["new_telegram_tag"],
                        context.user_data["new_role"], context.user_data["new_phone"],context.user_data["new_chat_id"])
        if user is None:
            await update.message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —ñ–∑ —Ç–∞–∫–∏–º TelegramTag –≤–∂–µ —ñ—Å–Ω—É—î.")
            return

        role = context.user_data["new_role"]
        success = False

        if role == "student":
            success = add_student(db, user.UserID, context.user_data["new_group"],
                                  context.user_data["new_admission_year"], context.user_data["new_specialty"])
        elif role == "teacher":
            success = add_teacher(db, user.UserID, context.user_data["new_email"], context.user_data["new_department"])

        if success:
            await update.message.reply_text(f"‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
        else:
            await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ {role}.")

    context.user_data.clear()

async def prompt_user_details(update: Update, context: CallbackContext):
    context.user_data["state"] = WAITING_FOR_USER_ROLE  # –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —â–æ —Ü–µ–π —Ä—è–¥–æ–∫ —î —É —Ñ—É–Ω–∫—Ü—ñ—ó
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: student –∞–±–æ teacher")

def confirm_user(session: Session, telegram_tag: str) -> bool:
    user = session.query(User).filter_by(TelegramTag=telegram_tag).first()
    if user and not user.IsConfirmed:
        user.IsConfirmed = True
        session.commit()
        return True
    return False


async def confirm_command(update: Update, context: CallbackContext):
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /confirm telegram_tag")
        return
    telegram_tag = context.args[0]
    with SessionLocal() as db:
        if confirm_user(db, telegram_tag):
            await update.message.reply_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ @{telegram_tag}.")


async def confirm(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ—Ö –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
    with SessionLocal() as db:
        unconfirmed_users = db.query(User).filter_by(IsConfirmed=False, Role='student').all()

        if not unconfirmed_users:
            await update.message.reply_text("–ù–µ–º–∞—î –Ω–µ–≤–µ—Ä–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç.")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —É—Å—ñ—Ö –∑–∞—è–≤–æ–∫
        message_text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n\n"

        for i, user in enumerate(unconfirmed_users, 1):
            # –î–æ–¥–∞—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            message_text += f"#{i} - {user.UserName} (@{user.TelegramTag})\n"
            message_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.PhoneNumber or '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"

            # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = db.query(Student).filter_by(UserID=user.UserID).first()
            if student:
                group = db.query(StudentGroup).filter_by(GroupID=student.GroupID).first()
                group_name = group.GroupName if group else "–ù–µ–≤—ñ–¥–æ–º–∞"
                message_text += f"üë®‚Äçüéì –ì—Ä—É–ø–∞: {group_name}\n"
                message_text += f"üìÖ –†—ñ–∫ –≤—Å—Ç—É–ø—É: {student.AdmissionYear}\n"

            message_text += "\n"

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞—è–≤–æ–∫
        keyboard = []
        row = []

        for i, user in enumerate(unconfirmed_users, 1):
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Ä—è–¥
            button = InlineKeyboardButton(f"#{i}", callback_data=f"confirm_{user.TelegramTag}")
            row.append(button)

            if len(row) == 3 or i == len(unconfirmed_users):
                keyboard.append(row)
                row = []

        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        keyboard.append([InlineKeyboardButton("–°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_confirmation")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            message_text + "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é:",
            reply_markup=reply_markup
        )
async def confirm_callback_handler(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    query = update.callback_query
    logging.info(f"confirm_callback_handler –æ—Ç—Ä–∏–º–∞–≤ –∑–∞–ø–∏—Ç: {query.data}")
    await query.answer()
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback-–∑–∞–ø–∏—Ç: {query.data}")

    if query.data == "cancel_confirmation":
        await query.edit_message_text("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        return

    # –û—Ç—Ä–∏–º—É—î–º–æ telegram_tag –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    telegram_tag = query.data.replace("confirm_", "")

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    with SessionLocal() as db:
        if confirm_user(db, telegram_tag):
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            user = db.query(User).filter_by(TelegramTag=telegram_tag).first()
            username = user.UserName if user else telegram_tag

            await query.edit_message_text(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} (@{telegram_tag}) —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.")

            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            if user and user.ChatID:
                try:
                    await context.bot.send_message(
                        chat_id=user.ChatID,
                        text="‚úÖ –í–∞—à—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ —Å–∏—Å—Ç–µ–º–∏."
                    )
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É: {e}")
        else:
            await query.edit_message_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{telegram_tag}.")