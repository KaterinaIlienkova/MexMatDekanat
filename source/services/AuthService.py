from source.config import logger
from source.models import User, Student, Teacher
from source.repositories import AuthRepository
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, CallbackContext
from typing import Optional, List, Dict, Any, Tuple


class AuthService:
    def __init__(self, auth_repository: AuthRepository):
        self.auth_repository = auth_repository

    async def check_and_register_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, telegram_tag: str, chat_id: int) -> str | None:
        user = self.auth_repository.get_user_by_telegram_tag(telegram_tag)

        if not user:
            context.user_data["state"] = "WAITING_FOR_STUDENT_DETAILS"
            context.user_data["new_telegram_tag"] = telegram_tag
            context.user_data["new_chat_id"] = chat_id
            context.user_data["new_role"] = "student"

            await update.message.reply_text(
                "üîí –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó.\n\n"
                "‚úèÔ∏è –ü—Ä–∏–∫–ª–∞–¥:\n"
                "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ, +380961234567, –§–Ü-21, 2023, –ö–æ–º–ø'—é—Ç–µ—Ä–Ω—ñ –Ω–∞—É–∫–∏"
            )
            return None

        if not user.IsConfirmed:
            await update.message.reply_text("‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.")
            return None

        self.auth_repository.update_chat_id(user, chat_id)
        return user.Role

    def create_user(self, username: str, telegram_tag: str, role: str, phone_number: str,
                    chat_id: Optional[int] = None, is_confirmed: bool = False) -> Optional[User]:
        """–°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–∏—Å—Ç–µ–º—ñ."""
        return self.auth_repository.add_user(username, telegram_tag, role, phone_number, chat_id, is_confirmed)

    def get_or_create_student_group(self, group_name: str, specialty_name: Optional[str] = None) -> Optional[int]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î ID —ñ—Å–Ω—É—é—á–æ—ó –≥—Ä—É–ø–∏ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤—É (—Ä–∞–∑–æ–º —ñ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—é), —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
        """
        student_group = self.auth_repository.get_student_group_by_name(group_name)
        if student_group:
            return student_group.GroupID

        if specialty_name:
            specialty = self.auth_repository.get_specialty_by_name(specialty_name)
            if not specialty:
                specialty_id = self.auth_repository.add_specialty_and_get_id(specialty_name)
                if not specialty_id:
                    return None
            else:
                specialty_id = specialty.SpecialtyID

            group_id = self.auth_repository.add_student_group(group_name, specialty_id)
            return group_id

        return None


    def get_or_create_department(self, department_name: str) -> Optional[int]:
        """–û—Ç—Ä–∏–º—É—î —ñ—Å–Ω—É—é—á–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∞–±–æ —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π. –ü–æ–≤–µ—Ä—Ç–∞—î ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É."""
        department = self.auth_repository.get_department_by_name(department_name)
        if not department:
            department = self.auth_repository.add_department(department_name)

        return department.DepartmentID if department else None

    def create_student(self, user_data: Dict[str, Any]) -> Optional[Student]:
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.

        Args:
            user_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Å—Ç—É–¥–µ–Ω—Ç–∞

        Returns:
            Student –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = self.create_user(
            username=user_data['username'],
            telegram_tag=user_data['telegram_tag'],
            role='student',
            phone_number=user_data['phone_number'],
            chat_id=user_data.get('chat_id'),
            is_confirmed=user_data.get('is_confirmed', False)
        )

        if not user:
            logger.error("Failed to create user")
            return None

        # 2. –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø—É
        group_id = self.get_or_create_student_group(
            user_data['group_name'],
            user_data.get('specialty_name')
        )

        if not group_id:
            logger.error(f"Failed to get or create group {user_data['group_name']}")
            return None

        # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = self.auth_repository.add_student(
            user_id=user.UserID,
            group_id=group_id,
            admission_year=user_data['admission_year']
        )

        return student

    def create_teacher(self, user_data: Dict[str, Any]) -> Optional[Teacher]:
        """
        –°—Ç–≤–æ—Ä—é—î –Ω–æ–≤–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏.

        Args:
            user_data: –°–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–∫–ª–∞–¥–∞—á–∞

        Returns:
            Teacher –∞–±–æ None —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        """
        # 1. –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = self.create_user(
            username=user_data['username'],
            telegram_tag=user_data['telegram_tag'],
            role='teacher',
            phone_number=user_data['phone_number'],
            chat_id=user_data.get('chat_id'),
            is_confirmed=user_data.get('is_confirmed', False)
        )

        if not user:
            logger.error("Failed to create user")
            return None

        # 2. –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
        department_id = self.get_or_create_department(user_data['department_name'])

        if not department_id:
            logger.error(f"Failed to get or create department {user_data['department_name']}")
            return None

        # 3. –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å –≤–∏–∫–ª–∞–¥–∞—á–∞
        teacher = self.auth_repository.add_teacher(
            user_id=user.UserID,
            email=user_data['email'],
            department_id=department_id
        )

        return teacher

    async def save_new_user_telegram(self, update: Update, context: CallbackContext) -> Optional[User]:
        """
        –ó–±–µ—Ä—ñ–≥–∞—î –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –¥–∞–Ω–∏—Ö Telegram –±–æ—Ç–∞.
        –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–ª—è—î –¥–∞–Ω—ñ, –æ—Ç—Ä–∏–º–∞–Ω—ñ –ø—ñ–¥ —á–∞—Å –¥—ñ–∞–ª–æ–≥—É –∑ –±–æ—Ç–æ–º.
        """
        user_data = context.user_data

        if not user_data or 'role' not in user_data:
            await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
            return None

        # –ë–∞–∑–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        telegram_user = update.effective_user
        chat_id = update.effective_chat.id

        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç –∑ –±–∞–∑–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
        base_user_data = {
            'username': user_data.get('username', telegram_user.full_name),
            'telegram_tag': user_data.get('telegram_tag', telegram_user.username),
            'phone_number': user_data.get('phone_number', ''),
            'chat_id': chat_id,
            'is_confirmed': True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –¥–µ–∫–∞–Ω–∞—Ç—É
        }

        # –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–ª—ñ, –¥–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ —ñ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–µ—Ç–æ–¥
        role = user_data['role']
        result = None

        if role == 'student':
            # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            student_data = {
                **base_user_data,
                'group_name': user_data.get('group_name', ''),
                'specialty_name': user_data.get('specialty_name', None),
                'admission_year': user_data.get('admission_year', 0)
            }

            result = self.create_student(student_data)
            if result:
                await update.message.reply_text("‚úÖ –°—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏!")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞.")

        elif role == 'teacher':
            # –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–∞–Ω—ñ –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–æ —Å–ª–æ–≤–Ω–∏–∫–∞
            teacher_data = {
                **base_user_data,
                'email': user_data.get('email', ''),
                'department_name': user_data.get('department_name', '')
            }

            result = self.create_teacher(teacher_data)
            if result:
                await update.message.reply_text("‚úÖ –í–∏–∫–ª–∞–¥–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏!")
            else:
                await update.message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏–∫–ª–∞–¥–∞—á–∞.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ —Ä–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

        return result

        def get_unconfirmed_students(self):
            """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –¥–µ—Ç–∞–ª—è–º–∏."""
        students_with_details = self.auth_repository.get_unconfirmed_students_with_details()

        result = []
        for user, student, group in students_with_details:
            result.append({
                'user_id': user.UserID,
                'username': user.UserName,
                'telegram_tag': user.TelegramTag,
                'phone_number': user.PhoneNumber,
                'student_id': student.StudentID,
                'group_name': group.GroupName,
                'admission_year': student.AdmissionYear
            })

        return result


    def get_unconfirmed_students(self):
            """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –¥–µ—Ç–∞–ª—è–º–∏."""
            students_with_details = self.auth_repository.get_unconfirmed_students_with_details()

            result = []
            for user, student, group in students_with_details:
                result.append({
                    'user_id': user.UserID,
                    'username': user.UserName,
                    'telegram_tag': user.TelegramTag,
                    'phone_number': user.PhoneNumber,
                    'student_id': student.StudentID,
                    'group_name': group.GroupName,
                    'admission_year': student.AdmissionYear
                })

            return result

    def confirm_user(self, user_id):
        """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return self.auth_repository.confirm_user(user_id)

    def delete_user(self, user_id):
        """–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return self.auth_repository.delete_user(user_id)

    def update_student_info(self, user_id, update_data):
        """–û–Ω–æ–≤–ª—é—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å—Ç—É–¥–µ–Ω—Ç–∞."""
        return self.auth_repository.update_student_info(user_id, update_data)

    def get_student_groups(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –≥—Ä—É–ø —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."""
        groups = self.auth_repository.get_student_groups()
        return [(group.GroupID, group.GroupName) for group in groups]

    async def get_admission_years(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Ä–æ–∫—ñ–≤ –≤—Å—Ç—É–ø—É —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."""
        return self.auth_repository.get_admission_years()
    async def get_groups_by_admission_year(self, admission_year):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑–∞ —Ä–æ–∫–æ–º –≤—Å—Ç—É–ø—É."""
        return self.auth_repository.get_groups_by_admission_year(admission_year)

    async def get_departments(self):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–∞—Ñ–µ–¥—Ä."""
        return self.auth_repository.get_departments()

    async def get_teachers_by_department(self, department_name):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ —ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ñ–µ–¥—Ä–∏."""
        return self.auth_repository.get_teachers_by_department(department_name)

    async def get_students_by_group_and_course(self, group_name, admission_year):
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —ñ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≥—Ä—É–ø–∏ —Ç–∞ —Ä–æ–∫—É –≤—Å—Ç—É–ø—É."""
        return self.auth_repository.get_students_by_group_and_course(group_name, admission_year)

    async def get_user_info(self, user_id):
        """–û—Ç—Ä–∏–º—É—î –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
        return self.auth_repository.get_user_info(user_id)

    async def get_user_by_chat_id(self,chat_id):
        return self.auth_repository.get_user_by_chat_id(chat_id)

