from telegram import InlineKeyboardButton, InlineKeyboardMarkup

class DocumentService:
    def __init__(self, auth_repo, document_type_repo, document_request_repo):
        self.auth_repo = auth_repo
        self.document_type_repo = document_type_repo
        self.document_request_repo = document_request_repo

    def can_request_document(self, chat_id):
        user = self.auth_repo.get_user_by_chat_id(chat_id)
        if not user or user.Role != 'student':
            return False, "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–æ—Å—Ç—É–ø–Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."

        student = self.auth_repo.get_student_by_user_id(user.UserID)
        if not student:
            return False, "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –¥–∞–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É."

        return True, student

    def get_available_document_types(self):
        document_types = self.document_type_repo.get_all_document_types()
        if not document_types:
            return None, "–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è."
        return document_types, None

    def create_document_request(self, document_type_id, student_id):
        try:
            document_type = self.document_type_repo.get_document_type_by_id(document_type_id)
            if not document_type:
                return None, "–ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–∞–Ω–∏–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

            new_request = self.document_request_repo.create_request(student_id, document_type_id)
            return new_request, document_type
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏: {e}")
            return None, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –¥–µ–∫–∞–Ω–∞—Ç—É."

    def get_pending_document_requests(self):
        requests = self.document_request_repo.get_pending_requests()
        if not requests:
            return None, "–ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –¥–ª—è –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è."

        request_details = []
        for req in requests:
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ StudentID –∑ –∑–∞–ø–∏—Ç—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
            student = self.student_repo.get_student_by_id(req.StudentID)
            if not student:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ–π –∑–∞–ø–∏—Ç, —è–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ UserID —Å—Ç—É–¥–µ–Ω—Ç–∞
            user = self.user_repo.get_user_by_id(student.UserID)
            if not user:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π

            doc_type = self.document_type_repo.get_document_type_by_id(req.TypeID)
            if not doc_type:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ, —è–∫—â–æ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π

            request_details.append({
                'request': req,
                'student': student,
                'user': user,
                'document_type': doc_type
            })

        if not request_details:
            return None, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –Ω–∞—è–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤."

        return request_details, None

    # def process_document_request(self, request_id, approve=True):
    #     status = 'processed' if approve else 'rejected'
    #     updated_request = self.document_request_repo.update_request_status(request_id, status)
    #
    #     if updated_request:
    #         # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∑–∞ StudentID –∑ –∑–∞–ø–∏—Ç—É
    #         student = self.student_repo.get_student_by_id(updated_request.StudentID)
    #         if not student:
    #             return False, None, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
    #
    #         # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ UserID —Å—Ç—É–¥–µ–Ω—Ç–∞
    #         user = self.user_repo.get_user_by_id(student.UserID)
    #         if not user:
    #             return False, None, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
    #
    #         status_text = "–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞" if approve else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–∞"
    #         message = f"{'‚úÖ' if approve else '‚ùå'} –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{updated_request.RequestID} –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–ª–∞ {status_text}."
    #
    #         return True, user.ChatID, message
    #
    #     return False, None, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

    def process_document_request_with_scan(self, request_id, scan_link, approve=True):
        status = 'approved' if approve else 'rejected'
        student_id, request_id = self.document_request_repo.update_request_status(request_id, status)

        if student_id:
            student = self.student_repo.get_student_by_id(student_id)
            if not student:
                return False, None, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"

            # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ UserID —Å—Ç—É–¥–µ–Ω—Ç–∞
            user = self.user_repo.get_user_by_id(student.UserID)
            if not user:
                return False, None, "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"

            status_text = "–æ–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∞" if approve else "–≤—ñ–¥—Ö–∏–ª–µ–Ω–∞"
            message = f"{'‚úÖ' if approve else '‚ùå'} –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{request_id} –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –±—É–ª–∞ {status_text}."
            if scan_link:
                message += f"\n–°–∫–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç—É –¥–æ—Å—Ç—É–ø–Ω–∏–π –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {scan_link}"

            return True, user.ChatID, message

        return False, None, "–ó–∞—è–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"
# class DocumentService:
#     """Service for document request operations"""
#
#     def __init__(self, doc_repo, user_repo):
#         self.doc_repo = doc_repo
#         self.user_repo = user_repo
#
#     async def request_document(self, update, context):
#         """Handle document request command"""
#         user = update.message.from_user
#         telegram_tag = user.username
#
#         # Check if user is a student
#         student_data = self.doc_repo.get_student_by_telegram_tag(telegram_tag)
#         if not student_data:
#             await update.message.reply_text("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —è–∫ —Å—Ç—É–¥–µ–Ω—Ç.")
#             return
#
#         # Get document types
#         document_types = self.doc_repo.get_all_document_types()
#
#         if not document_types:
#             await update.message.reply_text("‚ùå –ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤.")
#             return
#
#         # Create buttons for document selection
#         keyboard = []
#         for doc_type in document_types:
#             keyboard.append([InlineKeyboardButton(
#                 doc_type.TypeName,
#                 callback_data=f"doc_select_{doc_type.TypeID}"
#             )])
#
#         keyboard.append([InlineKeyboardButton("üö´ –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_doc")])
#         reply_markup = InlineKeyboardMarkup(keyboard)

        # await update.message.reply_text(
        #     "üìù –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏:",
        #     reply_markup=reply_markup
        # )

    # async def process_document_requests(self, update, context):
    #     """Show pending document requests for dean office staff"""
    #     user = update.message.from_user
    #     telegram_tag = user.username
    #
    #     # Check if user is dean office staff
    #     user_data = self.user_repo.get_by_telegram_tag(telegram_tag)
    #     if not user_data or user_data.Role != "dean_office":
    #         await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Ñ—É–Ω–∫—Ü—ñ—ó.")
    #         return
    #
    #     # Get pending requests
    #     requests = self.doc_repo.get_pending_document_requests()
    #
    #     if not requests:
    #         await update.message.reply_text("üéâ –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫, —â–æ –æ—á—ñ–∫—É—é—Ç—å —Ä–æ–∑–≥–ª—è–¥—É.")
    #         return
    #
    #     # Create message with requests
    #     message = "üìã